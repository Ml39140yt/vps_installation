= Installation d'un VPS
:source-highlighter: pygments
:pygments-linenums-mode: inline
:pygments-style: colorful
Stéphane Apiou <stephane@apiou.org>
v1.0, 2020-03-27
:icons: font
:numbered:
:allow-uri-read:


== Avant propos

Ce document est disponible sur le site https://vps-installation.readthedocs.io[ReadTheDocs]
// inhibé car ne fonctionne pas pour docbook
//image:https://readthedocs.org/projects/vps-installation/badge/[link="https://vps-installation.readthedocs.io"]
et sur https://github.com/apiou/vps_installation[Github].

Cette documentation décrit la méthode que j'ai utilisé pour installer un serveur VPS sur la plate-forme OVH.
Elle est le résultat de très nombreuses heures de travail pour collecter la documentation nécessaire.
Sur mon serveur, j'ai installé un Linux Debian 10. Cette documentation est facilement transposable pour des versions différentes de Debian ou à Ubuntu ou toute autre distribution basée sur l'un ou l'autre.
En revanche si vous utilisez CentOS, il y aura des différences beaucoup plus importantes notamment liées au gestionnaire de paquets `yum`, le nommage des paquets, les configurations par défaut et aux différences dans l'arborescence présente dans /etc.

Dans ce document, je configure de nombreux sites web et services de mon domaine en utilisant ISPConfig.

Sont installés:

* un panel ISPConfig
* un configurateur Webmin
* un serveur de mail avec antispam, sécurisation d'envoi des mails et autoconfiguration pour Outlook, Thunderbird, Android.
* un webmail https://roundcube.net[roundcube],
* un serveur de mailing list https://www.list.org[mailman],
* un serveur ftp et sftp sécurisé.
* un serveur de base de données et son interface web d'administration https://www.phpmyadmin.net/[phpmyadmin].
* des outils de sécurisation, de mise à jour automatique et d'audit du serveur
* un outil de Monitoring http://munin-monitoring.org/[Munin]
* un outil de Monitoring http://mmonit.com/monit/[Monit]
* un sous domaine pointant sur un site autohébergé (l’installation du site n'est pas décrite ici; Se référer à https://yunohost.org[Yunohost]),
* un site sous https://www.joomla.fr/[Joomla],
* un serveur et un site  de partage de fichiers https://www.seafile.com[Seafile],
* un site https://gitea.io[Gitea] et son repository GIT,
* un serveur de VPN https://pritunl.com/[pritunl],
* un site https://www.mediawiki.org[Mediawiki],
* un site https://nextcloud.com[Nextcloud]
* un site https://wordpress.com[Wordpress]
* à venir: strut, https://www.concrete5.org/[concrete5], https://gitlab.com/[gitlab], https://piwigo.org/[piwigo], https://www.borgbackup.org/[borg]

Dans ce document nous configurons un nom de domaine principal. Pour la clarté du texte, il sera nommé "example.com". Il est à remplacer évidemment par votre nom de domaine principal.

Je suppose dans ce document que vous savez vous connecter à distance sur un serveur en mode terminal, que vous savez vous servir de `ssh` pour Linux ou de `putty` pour Windows, que vous avez des notions élémentaires de Shell Unix et que vous savez vous servir de l'éditeur `vi`. Si `vi` est trop compliqué pour vous, je vous suggère d'utiliser l'éditeur de commande `nano` à la place.

Dans le document, on peut trouver des textes entourés de <texte>. Cela signifie que vous devez mettre ici votre propre texte selon vos préférences.

A propos des mots de passe: il est conseillé de saisir des mots de passe de 10 caractères contenant des majuscules/minuscules/nombres/caractères spéciaux. Une autre façon de faire est de saisir de longues phrases. Par exemple: 'J'aime manger de la mousse au chocolat parfumée à la menthe'. Ce dernier exemple a un taux de complexité est bien meilleur et les mots de passe classiques. Il est aussi plus facile à retenir que 'Az3~1ym_a&'.

Le coût pour mettre en oeuvre ce type de serveur est relativement faible:
* Compter 15-18€TTC/an pour un nom de domaine classique (mais il peut y avoir des promos)
* Compter 5€TTC/mois pour un VPS de base. Une machine plus sérieuse sera à 15€/mois

Le budget est donc de 6-7€TTC/mois pour une offre d'entrée de gamme. Il faut plus sérieusement compter sur 16€/mois tout compris.

== Choix du VPS

Cette partie du guide s'adresse aux utilisateurs d'OVH.
J'ai pour ma part choisi un serveur VPS SSD chez OVH avec 2Go de RAM. Au moment ou j'écris ce document il possède un seul coeur et 20 Go de disque.

Choisissez d'installer une image Linux seule avec Debian 10.
Une fois l'installation effectuée, vous recevez un Email sur l'adresse mail de votre compte OVH avec vos identifiants de login root. Ils serviront à vous connecter sur le serveur.

En vous loguant sur la https://www.ovh.com/manager/web[plateforme d'administration d'OVH], vous accèderez aux informations de votre serveur dans le menu Server->VPS. A cet endroit votre VPS doit y être indiqué.

En cliquant dessus un ensemble de menus doivent apparaitre pour administrer celui-ci. Vous y trouverez notamment:

* Son adresse <IP> et le nom de la machine chez OVH. Elle est du type "VPSxxxxxx.ovh.net".
* La possibilité de le redémarrer
* La possibilité de le reinstaller (avec perte complète de données)
* un KVM pour en prendre le controle console directement dans le navigateur
* un menu de configuration de reverse DNS (qui nous sera utile par la suite) pour définir le domaine par défaut
* le statut des services principaux (http, ftp, ssh ...)
* enfin des choix pour souscrire à un backup régulier, ajouter des disques ou effecter un snapshot de la VM associée au VPS.

== Choix du registrar

Pour rappel,un registrar est une société auprès de laquelle vous pourrez acheter un nom de domaine sur une durée déterminée. Vous devrez fournir pour votre enregistrement un ensemble de données personnelles qui permettront de vous identifier en tant que propriétaire de ce nom de domaine.

Pour ma part j'ai choisi Gandi car il ne sont pas très cher et leur interface d'administration est simple d'usage. Vous pouvez très bien prendre aussi vos DNS chez OVH.

Une fois votre domaine enregistré et votre compte créé vous pouvez vous loguer sur la https://admin.gandi.net/dashboard[plateforme de gestion de Gandi].

Allez dans Nom de domaine et sélectionnez le nom de domaine que vous voulez administrer.
La vue générale vous montre les services actifs. Il faut une fois la configuration des DNS effectuée être dans le mode suivant:

* Serveurs de noms: Externes
* Emails: Inactif
* DNSSEC: Actif (cela sera activé dans une seconde étape de ce guide)

Vous ne devez avoir aucune boite mail active sur ce domaine. A regardez dans le menu "Boites & redirections Mails".
Vous devez reconfigurer les 'Enregistrements DNS' en mode externes.
Dans le menu "serveurs de noms", vous devez configurer les serveurs de noms externe. Mettre 3 DNS:

* le nom de votre machine OVH: VPSxxxxxx.ovh.net
* et deux DNS de votre domaine: ns1.<example.com> et ns2.<example.com>

Pour que tout cela fonctionne bien, ajoutez des Glue records:

* un pour ns1.<example.com> lié à l'adresse <IP> du serveur OVH
* un pour ns2.<example.com> lié à l'adresse <IP> du serveur OVH

Il y a la possibilité chez OVH d'utiliser un DNS secondaire. Je ne l'ai pas mis en oeuvre.

Le menu restant est associé à DNSSEC; nous y reviendrons plus tard.

== Se loguer root sur le serveur

A de nombreux endroit dans la documentation, il est demandé de se loguer root sur le serveur.
Pour se loguer root, et dans l’hypothèse que vous avez mis en place un compte sudo:

. De votre machine locale, loguez vous avec votre compte `<sudo_username>`. Tapez :
+
[source,bash]
----
ssh <sudo_username>@<example.com> <1>
----
<1> Mettez ici <sudo_username> par votre nom de login et <example.com> par votre nom de domaine. Au début votre nom de domaine acheté n'est pas encore configuré. Il faut donc utiliser le nom de machine de votre VPS (pour ovh: VPSxxxxxx.ovh.net).
+
ou utilisez putty si vous êtes sous Windows.
. Tapez votre mot de passe s'il est demandé. Si vous avez installé une clé de connexion ce ne devrait pas être le cas.
. Loguez-vous `root`. Tapez :
+
[source,bash]
----
sudo bash
----
Un mot de passe vous est demandé. Tapez le mot de passe demandé.
. Dans le cas contraire (pas de sudo créé et connexion en root directe sur le serveur):
.. Se loguer root sur le serveur distant. Tapez:
+
[source,bash]
----
ssh root@<example.com> <1>
----
<1> remplacer ici <example.com> par votre nom de domaine.
+
Tapez ensuite votre mot de passe root

== Installation basique

=== Mise à jour des sources de paquets Debian

. Se loguer `root` sur le serveur
. Modifier la liste standard de paquets
.. Éditer le fichier `/etc/apt/sources.list`. Tapez:
+
[source,bash]
----
vi /etc/apt/sources.list
----
+
.. Dé-commenter les lignes débutant par `deb` et contenant le terme `backports`. Par exemple pour `#deb http://deb.debian.org/debian buster-backports main contrib non-free` enlever le # en début de ligne
.. Ajouter sur toutes les lignes les paquets `contrib` et `non-free` . en ajoutant ces textes après chaque mot `main` du fichier `source.list`
. Effectuer une mise à niveau du système
.. Mettez à jour la liste des paquets. Tapez:
+
[source,bash]
----
apt update
----
+
.. Installez les nouveautés. Tapez:
+
[source,bash]
----
apt dist-upgrade
----
+
. Effectuez du ménage. Tapez:
+
[source,bash]
----
apt autoremove
----

=== Installation des paquets de base

Tapez:

[source,bash]
----
apt install curl wget ntpdate apt-transport-https apt-listchanges apt-file apt-rdepends
----

=== Installation d'un repository pour `/etc`

Si vous souhaitez gérer en gestion de configuration le contenu de votre répertoire `/etc`, installez `etckeeper`.

Cette installation est optionnelle.

. Tapez :
+
[source,bash]
----
apt install etckeeper
----
. Vous pouvez créer un repository privé dans le cloud pour stocker votre configuration de serveur (autre serveur privé de confiance ou repository privé  `Gitlab` ou `Github`).
. Ajoutez ce repository distant. Pour `Gitlab` et `Github`, une fois le repository créé, demandez l'affichage de la commande git pour une communication en ssh. Tapez ensuite sur votre serveur :
+
[source,bash]
----
cd /etc
git remote add origin git@github.com:username/etc_keeper.git <1>
----
<1> remplacer l'url par celle qui correspond au chemin de votre repository
. modifier le fichier de configuration de `etckeeper`. tapez:
+
[source,bash]
----
vi /etc/etckeeper/etckeeper.conf
----
. Recherchez la ligne contenant `PUSH_REMOTE` et ajoutez y tous les repositories distant sur lesquels vous souhaitez pousser les modifications. Pour notre configuration, mettez:
+
[source,bash]
----
PUSH_REMOTE="origin"
----
. Pour éviter demandes de mot de passe de la part de `github` ou `gitlab`, il est nécessaire de déclarer une clé publique sur leur site. Créez une clé sur votre serveur pour l'utilisateur root:
.. Créer un répertoire `/root/.ssh` s'il n'existe pas. tapez :
+
[source,bash]
----
cd /root
mkdir -p .ssh
----
.. Allez dans le répertoire. Tapez :
+
[source,bash]
----
cd /root/.ssh
----
.. Générez vous clés. Tapez :
+
[source,bash]
----
ssh-keygen -t rsa
----
.. Un ensemble de questions apparaît. Si un texte vous explique que le fichier existe déjà, arrêtez la procédure. Cela signifie que vous avez déjà créé une clé et que vous risquez de perdre la connexion à d'autres serveurs si vous en générez une nouvelle. Sinon, appuyez sur Entrée à chaque fois pour accepter les valeurs par défaut.
.. Allez sur `gitlab` ou `github` dans la rubriques "settings" et le menu "SSH keys". Ajoutez la clé que vous aurez affiché avec la commande suivante:
+
[source,bash]
----
cat /root/.ssh/id_rsa.pub
----
. Effectuez un premier push. Tapez:
+
[source,bash]
----
git push -u origin master
----
. aucun mot de passe ne doit vous être demandé. Si ce n'est pas le cas, re-vérifier les étapes précédentes.
. Lancer `etckeeper`. Tapez:
+
[source,bash]
----
etckeeper commit
----
. Tout le contenu de `/etc` est poussé sur le repository. Saisissez un commentaire.
. C'est fait !


=== Installer l'outil Debfoster

L'outil `debfoster` permet de ne conserver que les paquets essentiels.

Cette installation est optionnelle.

Il maintient un fichier `keepers` présent dans `/var/lib/debfoster`

En répondant aux questions de conservations de paquets, `debfoster` maintient la liste des paquets uniques nécessaires au système.
Tous les autres paquets seront supprimés.

. Se loguer `root` sur le serveur
. Ajouter le paquet `debfoster`. Tapez :
+
[source,bash]
----
apt install debfoster
----
. Lancez `debfoster`. Tapez :
+
[source,bash]
----
debfoster
----
. Répondez au questions pour chaque paquet
. Acceptez la liste des modifications proposées à la fin. Les paquets superflus seront supprimés

=== Création d'un fichier keeper dans /etc

Vous pourriez être intéressé après l'installation de `debfoster` et de `etckeeper` de construire automatiquement un fichier qui contient la liste des paquets qui permettent de réinstaller le systeme:

. Loguez vous comme `root`
. Tapez:
+
[source,bash]
----
vi /etc/etckeeper/pre-commit.d/35debfoster
----
. Saisissez dans le fichier:
+
[source,bash]
----
#!/bin/sh
set -e

# Make sure sort always sorts in same order.
LANG=C
export LANG

shellquote() {
        # Single quotes text, escaping existing single quotes.
        sed -e "s/'/'\"'\"'/g" -e "s/^/'/" -e "s/$/'/"
}


if [ "$VCS" = git ] || [ "$VCS" = hg ] || [ "$VCS" = bzr ] || [ "$VCS" = darcs ]; then
        # Make sure the file is not readable by others, since it can leak
        # information about contents of non-readable directories in /etc.
        debfoster -q -k /etc/keepers
        chmod 600 /etc/keepers
        sed -i "1i\\# debfoster file" /etc/keepers
        sed -i "1i\\# Generated by etckeeper.  Do not edit."  /etc/keepers

        # stage the file as part of the current commit
        if [ "$VCS" = git ]; then
                # this will do nothing if the keepers file is unchanged.
                git add keepers
        fi
        # hg, bzr and darcs add not done, they will automatically
        # include the file in the current commit
fi
----
. Sauvez et tapez:
+
[source,bash]
----
chmod 755 /etc/etckeeper/pre-commit.d/35debfoster
----
. Exécutez maintenant `etckeeper`
+
[source,bash]
----
vi /etc/etckeeper/pre-commit.d/35debfoster
----
. Le fichier keepers est créé et sauvegardé automatiquement.

=== Installation des mises à jours automatiques

Si vous souhaitez installer automatiquement les paquets Debian de correction de bugs de sécurité, cette installation est pour vous.

Cette installation est optionnelle.

[WARNING]
L'installation automatique de paquets peut conduire dans certains cas très rare à des dysfonctionnements du serveur. Il est important de regarder périodiquement les logs d'installation


Tapez:

[source,bash]
----
apt install unattended-upgrades
----
=== Vérification du nom de serveur

Cette partie consiste à vérifier que le serveur a un hostname correctement configuré.

. Se loguer `root` sur le serveur
. vérifier que le hostname est bien celui attendu (c'est à dire configuré par votre hébergeur). Tapez :
+
[source,bash]
----
cat /etc/hostname
----
+
Le nom du hostname (sans le domaine) doit s'afficher.

.. Si ce n'est pas le cas, changer ce nom en éditant le fichier. Tapez :
+
[source,shell]
----
vi /etc/hostname
----
Changez la valeur, sauvegardez et rebootez. Tapez :
+
[source,bash]
----
reboot
----
.. Se loguer`root` de nouveau sur le serveur
. Vérifier le fichier `hosts`. Tapez :
+
[source,bash]
----
cat /etc/hosts
----
Si le fichier contient plusieurs lignes avec la même adresse de loopback en `127.x.y.z`, en gardez une seule et celle avec le hostname et le nom de domaine complet.
.. si ce n'est pas le cas, changer les lignes en éditant le fichier. Tapez:
+
[source,bash]
----
vi /etc/hosts
----
Changez la ou les lignes, sauvegardez et rebootez. Tapez :
+
[source,bash]
----
reboot
----
.. Se logger`root` de nouveau sur le serveur
. Vérifiez que tout est correctement configuré.
.. Tapez :
+
[source,bash]
----
hostname
----
La sortie doit afficher le nom de host.
.. Tapez ensuite :
+
[source,bash]
----
hostname -f
----
La sortie doit afficher le nom de host avec le nom de domaine.


=== Interdire le login direct en root

Il est toujours vivement déconseillé d'autoriser la possibilité de se connecter directement en SSH en tant que root.
De ce fait, notre première action sera de désactiver le login direct en root  et d'autoriser le sudo.
Respectez bien les étapes de cette procédure:

. Se loguer `root` sur le serveur
. Ajoutez un utilisateur standard qui sera nommé par la suite en tant que <sudo_username>
.. Tapez :
+
[source,bash]
----
adduser <sudo_username>
----

.. Répondez aux questions qui vont sont posées: habituellement le nom complet d'utilisateur et le mot de passe.
.. Donner les attributs sudo à l'utilisateur `<sudo_username>`. Tapez :
+
[source,bash]
----
usermod -a -G sudo <sudo_username>
----
.. Dans une autre fenêtre, se connecter sur le serveur avec votre nouveau compte `<sudo_username>`:
+
[source,bash]
----
ssh <sudo_username>@<example.com> <1>
----
<1> remplacer ici <sudo_username> par votre login et <example.com> par votre nom de domaine
.. une fois logué, tapez:
+
[source,bash]
----
sudo bash
----
Tapez le mot de passe de votre utilisateur. Vous devez avoir accès au compte root. Si ce n'est pas le cas, revérifiez la procédure et repassez toutes les étapes.

[IMPORTANT]
Tout pendant que ces premières étapes ne donnent pas satisfaction ne passez pas à la suite sous peine de perdre la possibilité d’accéder à votre serveur.

. Il faut maintenant modifier la configuration de sshd.
.. Editez le fichier `/etc/ssh/sshd_config`, Tapez:
+
[source,bash]
----
vi /etc/ssh/sshd_config
----
il faut rechercher la ligne: `PermitRootLogin yes` et la remplacer par: `PermitRootLogin no`
.. Redémarrez le serveur ssh. Tapez :
+
[source,bash]
----
service sshd restart
----
. Faites maintenant l'essai de vous re-loguer avec le compte root.Tapez :
+
[source,bash]
----
ssh root@<example.com> <1>
----
<1> Remplacer ici <example.com> par votre nom de domaine

. Ce ne devrait plus être possible: le serveur vous l'indique par un message `Permission denied, please try again.`

=== Création d'une clé de connexion ssh locale

Pour créer une clé et la déployer:

. Créez une clé sur votre machine locale (et pas sur le serveur distant!):
.. Ouvrir un terminal
.. Créer un répertoire `~/.ssh` s'il n'existe pas. tapez :
+
[source,bash]
----
mkdir -p $HOME/.ssh
----
.. Allez dans le répertoire. Tapez :
+
[source,bash]
----
cd ~/.ssh
----
.. Générez vous clés. Tapez :
+
[source,bash]
----
ssh-keygen -t rsa
----
.. Un ensemble de questions apparaît. Si un texte vous explique que le fichier existe déjà, arrêtez la procédure. Cela signifie que vous avez déjà créé une clé et que vous risquez de perdre la connexion à d'autres serveurs si vous en générez une nouvelle. Sinon, appuyez sur Entrée à chaque fois pour accepter les valeurs par défaut.
. Déployez votre clé:
.. Loguez vous sur votre serveur distant. Tapez :
+
[source,bash]
----
ssh <sudo_username>@<example.com> <1>
----
<1> remplacer ici <sudo_username> par votre login et <example.com> par votre nom de domaine
+
Entrez votre mot de passe
.. Créer un répertoire `~/.ssh` s'il n'existe pas. tapez: :
+
[source,bash]
----
mkdir -p $HOME/.ssh
----
.. Éditez le fichier `~/.ssh/authorized_keys` tapez:
+
[source,bash]
----
vi ~/.ssh/authorized_keys
----
et coller dans ce fichier le texte contenu dans le votre fichier local `~/.ssh/id_rsa.pub`. Remarque: il peut y avoir déjà des clés dans le fichier `authorized_keys`.
.. Sécurisez votre fichier de clés. Tapez: :
+
[source,bash]
----
chmod 600 ~/.ssh/authorized_keys
----
.. Sécurisez le répertoire SSH; Tapez :
+
[source,bash]
----
chmod 700 ~/.ssh
----
.. Déconnectez vous de votre session
. Vérifiez que tout fonctionne en vous connectant. Tapez: :
+
[source,bash]
----
ssh <sudo_username>@<example.com> <1>
----
<1> remplacer ici <sudo_username> par votre login et <example.com> par votre nom de domaine
+
La session doit s'ouvrir sans demander de mot de passe.

=== Sudo sans mot de passe

Avant tout, il faut bien se rendre compte que cela constitue potentiellement une faille de sécurité et qu'en conséquence, le compte possédant cette propriété devra être autant sécurisé qu'un compte root.
L’intérêt étant d'interdire le compte root en connexion ssh tout en gardant la facilité de se loguer root sur le système au travers d'un super-compte.

. Ajoutez un groupe sudonp et y affecter un utilisateur. Tapez :
+
[source,bash]
----
addgroup --system sudonp
----
.. Ajouter l'utilisateur: :
+
[source, bash]
------
usermod -a -G sudonp <sudo_username>
------
.. Éventuellement retirez l'utilisateur du groupe sudo s'il a été ajouté auparavant :
+
[source,bash]
----
gpasswd -d -G sudo <sudo_username>
----
.. Éditez le fichier sudoers. Tapez :
+
[source,bash]
----
vi /etc/sudoers
----
.. Ajouter dans le fichier la ligne suivante: `%sudonp ALL=(ALL:ALL) NOPASSWD: ALL`

L'utilisateur nom_d_utilisateur pourra se logger root sans mot de passe au travers de la commande `sudo bash`

=== Installer l'outil dselect

L'outil `dselect` permet de choisir de façon interactive les paquets que l'on souhaite installer.

. Se loguer `root` sur le serveur
. Ajouter le paquet `dselect`. Tapez :
+
[source,bash]
----
apt install dselect
----

=== Ajouter un fichier de swap

Pour un serveur VPS de 2 Go de RAM, la taille du fichier de swap sera de 1 Go:

. Tapez:
+
[source,bash]
----
fallocate -l 1G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
----
+
. Enfin ajoutez une entrée dans le fichier fstab. Tapez `vi /etc/fstab` et ajoutez la ligne:
+
----
/swapfile swap swap defaults 0 0
----

== Installation initiale des outils


La procédure d'installation ci-dessous configure ISPconfig avec les fonctionnalités suivantes: Postfix, Dovecot, MariaDB, rkHunter, Amavisd, SPamAssassin, ClamAV, Apache, PHP, Let's Encrypt, Mailman, PureFTPd, Bind, Webalizer, AWStats, fail2Ban, UFW Firewall, PHPMyadmin, RoundCube.

. Se loguer `root` sur le serveur
. Changez le Shell par défaut. Tapez :
+
[source,bash]
----
dpkg-reconfigure dash.
----
A la question `utilisez dash comme shell par défaut` répondez `non`. C'est bash qui doit être utilisé.
. Installation de quelques paquets debian. ;-)
..  Tapez :
+
[source,bash]
----
apt install patch ntp postfix postfix-mysql postfix-doc mariadb-client mariadb-server openssl getmail4 rkhunter binutils dovecot-imapd dovecot-pop3d dovecot-mysql dovecot-sieve dovecot-lmtpd amavisd-new spamassassin clamav clamav-daemon unzip bzip2 arj nomarch lzop cabextract p7zip p7zip-full unrar lrzip libnet-ldap-perl libauthen-sasl-perl clamav-docs daemon libio-string-perl libio-socket-ssl-perl libnet-ident-perl zip libnet-dns-perl libdbd-mysql-perl postgrey apache2 apache2-doc apache2-utils libapache2-mod-php php7.3 php7.3-common php7.3-gd php7.3-mysql php7.3-imap php7.3-cli php7.3-cgi libapache2-mod-fcgid apache2-suexec-pristine php-pear mcrypt  imagemagick libruby libapache2-mod-python php7.3-curl php7.3-intl php7.3-pspell php7.3-recode php7.3-sqlite3 php7.3-tidy php7.3-xmlrpc php7.3-xsl memcached php-memcache php-imagick php-gettext php7.3-zip php7.3-mbstring memcached libapache2-mod-passenger php7.3-soap php7.3-fpm php7.3-opcache php-apcu bind9 dnsutils haveged webalizer awstats geoip-database libclass-dbi-mysql-perl libtimedate-perl fail2ban ufw
----

.  Aux questions posées répondez:
.. `Type principal de configuration de mail`: <- Sélectionnez `Site Internet`
.. `Nom de courrier`: <- Entrez votre nom de host. Par exemple: mail.example.com

=== Configuration de Postfix

. Editez le master.cf file de postfix. Tapez `vi /etc/postfix/master.cf`
. Ajoutez dans le fichier:
+
----
submission inet n - - - - smtpd
 -o syslog_name=postfix/submission
 -o smtpd_tls_security_level=encrypt
 -o smtpd_sasl_auth_enable=yes
 -o smtpd_client_restrictions=permit_sasl_authenticated,reject

smtps inet n - - - - smtpd
 -o syslog_name=postfix/smtps
 -o smtpd_tls_wrappermode=yes
 -o smtpd_sasl_auth_enable=yes
 -o smtpd_client_restrictions=permit_sasl_authenticated,reject
----
+
. Sauvegardez et relancez Postfix: `systemctl restart postfix`

=== Configuration de MariaDB

. Sécurisez votre installation MariaDB. Tapez :
+
[source,bash]
----
mysql_secure_installation.
----
Répondez au questions ainsi:
.. `Enter current password for root`: <- Tapez Entrée
.. `Set root password? [Y/n]`: <- Tapez `Y`
.. `New password:`: <- Tapez votre mot de passe root MariaDB
.. `Re-enter New password:`: <- Tapez votre mot de passe root MariaDB
.. `Remove anonymous users? [Y/n]`: <- Tapez `Y`
.. `Disallow root login remotely? [Y/n]`: <- Tapez `Y`
.. `Remove test database and access to it? [Y/n]`: <- Tapez `Y`
.. `Reload privilege tables now? [Y/n]`: <- Tapez `Y`
. MariaDB doit pouvoir être atteint par toutes les interfaces et pas seulement localhost.
. Éditez le fichier de configuration. :
+
[source,bash]
----
vi /etc/mysql/mariadb.conf.d/50-server.cnf
----
. Commentez la ligne `bind-address`: `#bind-address           = 127.0.0.1`
. Modifiez la méthode d'accès à la base MariaDB pour utiliser la méthode de login native.
.. Tapez :
+
[source,bash]
----
echo "update mysql.user set plugin = 'mysql_native_password' where user='root';" | mysql -u root
----

. Editez le fichier debian.cnf. Tapez :
+
[source,bash]
----
vi /etc/mysql/debian.cnf
----

.. Aux deux endroits du fichier ou le mot clé `password` est présent, mettez le mot de passe root de votre base de données.
.. `password = votre_mot_de_passe`
. Pour éviter l'erreur `Error in accept: Too many open files`, augmenter la limite du nombre de fichiers ouverts.
.. Editer le fichier: :
+
[source,bash]
----
vi /etc/security/limits.conf
----
.. Ajoutez à la fin du fichier les deux lignes:
+
[source,bash]
----
mysql soft nofile 65535
mysql hard nofile 65535
----
+
. Créez ensuite un nouveau répertoire. Tapez:
+
[source,bash]
----
mkdir -p /etc/systemd/system/mysql.service.d/
----
.. Editer le fichier limits.conf. :
+
[source,bash]
----
vi /etc/systemd/system/mysql.service.d/limits.conf
----
.. Ajoutez dans le fichier les lignes suivantes:
+
----
[Service]
LimitNOFILE=infinity
----
+
. Redémarrez votre serveur MariaDB. Tapez: :
+
[source,bash]
----
systemctl daemon-reload
systemctl restart mariadb
----
. vérifiez maintenant que MariaDB est accessible sur toutes les interfaces réseau. Tapez :
+
[source,bash]
----
netstat -tap | grep mysql
----
. La sortie doit être du type: `tcp6 0 0 [::]:mysql [::]:* LISTEN 13708/mysqld`
. Désactiver SpamAssassin puisque amavisd utilise celui ci en sous jacent. Tapez :
+
[source,bash]
----
systemctl stop spamassassin
systemctl disable spamassassin.
----

=== Configuration d'Apache

. Installez les modules Apache nécessaires. Tapez :
+
[source,bash]
----
a2enmod suexec rewrite ssl proxy_http actions include dav_fs dav auth_digest cgi headers actions proxy_fcgi alias speling
----

. Pour ne pas être confronté aux problèmes de sécurité  de type https://www.howtoforge.com/tutorial/httpoxy-protect-your-server/[HTTPOXY], il est nécessaire de créer un petit module dans apache.
.. Éditez le fichier httpoxy.conf: :
+
[source,bash]
----
vi /etc/apache2/conf-available/httpoxy.conf
----
.. Collez les lignes suivantes:
+
[source,apache]
----
<IfModule mod_headers.c>
    RequestHeader unset Proxy early
</IfModule>
----
. Activez le module en tapant :
+
[source,bash]
----
a2enconf httpoxy
systemctl restart apache2
----

=== Installation et Configuration de Mailman

. Tapez :
+
[source,bash]
----
apt-get install mailman
----
. Sélectionnez un langage:
.. `Languages to support:` <- Tapez `en (English)`
.. `Missing site list :` <- Tapez `Ok`
. Créez une mailing list. Tapez: `newlist mailman`
. ensuite éditez le fichier aliases: :
+
[source,bash]
----
vi /etc/aliases
----
et ajoutez les lignes affichées à l'écran:
+
-----
## mailman mailing list
mailman:              "|/var/lib/mailman/mail/mailman post mailman"
mailman-admin:        "|/var/lib/mailman/mail/mailman admin mailman"
mailman-bounces:      "|/var/lib/mailman/mail/mailman bounces mailman"
mailman-confirm:      "|/var/lib/mailman/mail/mailman confirm mailman"
mailman-join:         "|/var/lib/mailman/mail/mailman join mailman"
mailman-leave:        "|/var/lib/mailman/mail/mailman leave mailman"
mailman-owner:        "|/var/lib/mailman/mail/mailman owner mailman"
mailman-request:      "|/var/lib/mailman/mail/mailman request mailman"
mailman-subscribe:    "|/var/lib/mailman/mail/mailman subscribe mailman"
mailman-unsubscribe:  "|/var/lib/mailman/mail/mailman unsubscribe mailman"
-----
+
. Exécutez :
+
[source,bash]
----
newaliases
----
et redémarrez postfix: :
+
[source,bash]
----
systemctl restart postfix
----

. Activez la page web de mailman dans apache: :
+
[source,bash]
----
ln -s /etc/mailman/apache.conf /etc/apache2/conf-enabled/mailman.conf
----
. Redémarrez apache :
+
[source,bash]
----
systemctl restart apache2
----
puis redémarrez le demon mailman :
+
[source,bash]
----
systemctl restart mailman
----
. Le site web de mailman est accessible
.. Vous pouvez accéder à la page admin Mailman à http://<server1.example.com>/cgi-bin/mailman/admin/
.. La page web utilisateur de la mailing list est accessible  ici http://<server1.example.com/cgi-bin>/mailman/listinfo/.
.. Sous http://<server1.example.com>/pipermail/mailman vous avez accès aux archives.

=== Configuration d' Awstats

. configurer la tache cron d'awstats: Éditez le fichier :
+
[source,bash]
----
vi /etc/cron.d/awstats:
----
Et commentez toutes les lignes:
+
----
#MAILTO=root
#*/10 * * * * www-data [ -x /usr/share/awstats/tools/update.sh ] && /usr/share/awstats/tools/update.sh
# Generate static reports:
#10 03 * * * www-data [ -x /usr/share/awstats/tools/buildstatic.sh ] && /usr/share/awstats/tools/buildstatic.sh
----

=== Configuration de Fail2ban

. Editez le fichier: :
+
[source,bash]
----
vi /etc/fail2ban/jail.local.
----
Ajoutez les lignes suivantes:
+
[source,ini]
----
[dovecot]
enabled = true
filter = dovecot
logpath = /var/log/mail.log
maxretry = 5

[postfix-sasl]
enabled = true
port = smtp
filter = postfix[mode=auth]
logpath = /var/log/mail.log
maxretry = 3
----
. Redémarrez Fail2ban: :
+
[source,bash]
----
systemctl restart fail2ban
----

=== Installation et configuration de PureFTPd

. Tapez: :
+
[source,bash]
----
apt-get install pure-ftpd-common pure-ftpd-mysql
----
. Éditez le fichier de conf: :
+
[source,bash]
----
vi /etc/default/pure-ftpd-common
----
. Changez les lignes ainsi: `STANDALONE_OR_INETD=standalone` et `VIRTUALCHROOT=true`
. Autorisez les connexions TLS. Tapez:
+
[source,bash]
----
echo 1 > /etc/pure-ftpd/conf/TLS
----
. Créez un certificat SSL.
.. Tapez :
+
[source,bash]
----
mkdir -p /etc/ssl/private/
----
.. Puis créez le certificat auto signé. Tapez :
+
[source,bash]
----
openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem
----
et répondez aux questions de la manière suivante:
... `Country Name (2 letter code) [AU]:` <- Entrez le code pays à 2 lettres
... `State or Province Name (full name) [Some-State]:` <- Entrer le nom d'état
... `Locality Name (eg, city) []:` <- Entrer votre ville
... `Organization Name (eg, company) [Internet Widgits Pty Ltd]:` <- Entrez votre entreprise ou tapez entrée
... `Organizational Unit Name (eg, section) []:` <- Tapez entrée
... `Common Name (e.g. server FQDN or YOUR name) []:` <- Enter le nom d'hôte de votre serveur. Dans notre cas: server1.example.com
... `Email Address []:` <- Tapez entrée
.. Puis tapez :
+
[source,bash]
----
chmod 600 /etc/ssl/private/pure-ftpd.pem
----
.. et redémarrez pure-ftpd en tapant: :
+
[source,bash]
----
systemctl restart pure-ftpd-mysql
----

=== Installation et configuration de phpmyadmin

. Installez phpmyadmin. Exécutez:
+
[source,bash]
----
mkdir /usr/share/phpmyadmin
mkdir /etc/phpmyadmin
mkdir -p /var/lib/phpmyadmin/tmp
chown -R www-data:www-data /var/lib/phpmyadmin
touch /etc/phpmyadmin/htpasswd.setup
cd /tmp
wget https://files.phpmyadmin.net/phpMyAdmin/4.9.0.1/phpMyAdmin-4.9.0.1-all-languages.tar.gz
tar xfz phpMyAdmin-4.9.0.1-all-languages.tar.gz
mv phpMyAdmin-4.9.0.1-all-languages/* /usr/share/phpmyadmin/
rm phpMyAdmin-4.9.0.1-all-languages.tar.gz
rm -rf phpMyAdmin-4.9.0.1-all-languages
cp /usr/share/phpmyadmin/config.sample.inc.php  /usr/share/phpmyadmin/config.inc.php
----
+
. Éditez le fichier :
+
[source,bash]
----
vi /usr/share/phpmyadmin/config.inc.php
----
.. Modifier l’entrée `blowfish_secret` en ajoutant votre propre chaîne de 32 caractères.
.. Éditez le fichier: :
+
[source,bash]
----
vi /etc/apache2/conf-available/phpmyadmin.conf
----
.. Ajoutez les lignes suivantes:
+
[source,apache]
----
# phpMyAdmin default Apache configuration

Alias /phpmyadmin /usr/share/phpmyadmin

<Directory /usr/share/phpmyadmin>
 Options FollowSymLinks
 DirectoryIndex index.php

 <IfModule mod_php7.c>
 AddType application/x-httpd-php .php

 php_flag magic_quotes_gpc Off
 php_flag track_vars On
 php_flag register_globals Off
 php_value include_path .
 </IfModule>

</Directory>

# Authorize for setup
<Directory /usr/share/phpmyadmin/setup>
 <IfModule mod_authn_file.c>
 AuthType Basic
 AuthName "phpMyAdmin Setup"
 AuthUserFile /etc/phpmyadmin/htpasswd.setup
 </IfModule>
 Require valid-user
</Directory>

# Disallow web access to directories that don't need it
<Directory /usr/share/phpmyadmin/libraries>
 Order Deny,Allow
 Deny from All
</Directory>
<Directory /usr/share/phpmyadmin/setup/lib>
 Order Deny,Allow
 Deny from All
</Directory>
----
+
. Activez le module et redémarrez apache. Tapez :
+
[source,bash]
----
a2enconf phpmyadmin
systemctl restart apache2
----
. Créer la base de donnée phpmyadmin.
.. Tapez :
+
[source,bash]
----
mysql -u root -p.
----
puis entrer le mot de passe root
.. Créez une base phpmyadmin. Tapez :
+
[source,bash]
----
CREATE DATABASE phpmyadmin;
----
.. Créez un utilisateur phpmyadmin. Tapez :
+
[source,bash]
----
CREATE USER 'pma'@'localhost' IDENTIFIED BY 'mypassword'; <1>
----
<1> `mypassword` doit être remplacé par un mot de passe choisi.

.. Accordez des privilèges et sauvez: `GRANT ALL PRIVILEGES ON phpmyadmin.* TO 'pma'@'localhost' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;` puis tapez `FLUSH PRIVILEGES;` et enfin `EXIT;`
. Chargez les tables sql dans la base phpmyadmin: `mysql -u root -p phpmyadmin < /usr/share/phpmyadmin/sql/create_tables.sql`
. Enfin ajoutez les mots de passe nécessaires dans le fichier de config.
.. Tapez: `vi /usr/share/phpmyadmin/config.inc.php`
.. Rechercher le texte contenant `controlhost` .  Ci-dessous, un exemple:
+
[source,php]
----
/* User used to manipulate with storage */
$cfg['Servers'][$i]['controlhost'] = 'localhost';
$cfg['Servers'][$i]['controlport'] = '';
$cfg['Servers'][$i]['controluser'] = 'pma';
$cfg['Servers'][$i]['controlpass'] = 'mypassword'; <1>


/* Storage database and tables */
$cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
$cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
$cfg['Servers'][$i]['relation'] = 'pma__relation';
$cfg['Servers'][$i]['table_info'] = 'pma__table_info';
$cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
$cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
$cfg['Servers'][$i]['column_info'] = 'pma__column_info';
$cfg['Servers'][$i]['history'] = 'pma__history';
$cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
$cfg['Servers'][$i]['tracking'] = 'pma__tracking';
$cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
$cfg['Servers'][$i]['recent'] = 'pma__recent';
$cfg['Servers'][$i]['favorite'] = 'pma__favorite';
$cfg['Servers'][$i]['users'] = 'pma__users';
$cfg['Servers'][$i]['usergroups'] = 'pma__usergroups';
$cfg['Servers'][$i]['navigationhiding'] = 'pma__navigationhiding';
$cfg['Servers'][$i]['savedsearches'] = 'pma__savedsearches';
$cfg['Servers'][$i]['central_columns'] = 'pma__central_columns';
$cfg['Servers'][$i]['designer_settings'] = 'pma__designer_settings';
$cfg['Servers'][$i]['export_templates'] = 'pma__export_templates';
----
<1> A tous les endroit ou vous voyez dans le texte ci dessus le mot `mypassword` mettez celui choisi. N'oubliez pas de dé-commenter les lignes.

=== Installation et configuration de Roundcube

. Tapez:
+
[source,bash]
----
apt-get install roundcube roundcube-core roundcube-mysql roundcube-plugins
----
. Éditez le fichier php de roundcube: :
+
[source,bash]
----
vi /etc/roundcube/config.inc.php
----
et définissez les hosts par défaut comme localhost
+
[source,php]
----
$config['default_host'] = 'localhost';
$config['smtp_server'] = 'localhost';
----
. Éditez la configuration apache pour roundcube: :
+
[source,bash]
----
vi /etc/apache2/conf-enabled/roundcube.conf
----
et ajouter au début les lignes suivantes:
+
[source,apache]
----
Alias /roundcube /var/lib/roundcube
Alias /webmail /var/lib/roundcube
----

. Redémarrez Apache:
+
[source,bash]
----
systemctl reload apache2
----

=== Installation de Let's Encrypt

Installez Let's Encrypt. Tapez:
[source,bash]
----
cd /usr/local/bin
wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
./certbot-auto --install-only
----

=== Installation d'un scanner de vulnérabilités

. installer Git. Tapez :
+
[source,bash]
----
apt install git
----
. installer Lynis
.. Tapez :
+
[source,bash]
----
git clone https://github.com/CISOfy/lynis
----
.. Executez :
+
[source,bash]
----
cd lynis;./lynis audit system
----
. L'outil vous listera dans une forme très synthétique la liste des vulnérabilités et des améliorations de sécurité à appliquer.

== Installation d'un Panel

Il existe plusieurs type de panel de contrôle pour les VPS. La plupart sont payant.

Pour citer les plus connus:
    - payant: cPanel (leader du type), Plesk
    - gratuit: Yunohost ( un excellent système d'autohébergement packagé) , Ajenti, Froxlor, Centos web panel, Webmin et Usermin, ISPConfig, HestiaCP, VestaCP , 

Ci après nous allons en présenter 3 différents (ISPConfig, Webmin et HestiaCP). Ils sont incompatibles entre eux.

On peut faire cohabiter ISPConfig et Webmin en prenant les précautions suivantes:
* ISPConfig est le maitre de la configuration: toute modification sur les sites webs, mailboxes et DNS doit impérativement être effectuées du coté d'ISPConfig
* Les modifications réalisées au niveau de webmin pour ces sites webs, mailboxes et DNS seront au mieux écrasées par ISPConfig au pire elles risquent de conduire à des incompatibilités qui engendreront des dysfonctionnement d'ISPConfig (impossibilité de mettre à jour les configurations)
* Le reste des modifications peuvent être configurées au niveau de webmin sans trop de contraintes.

Pour rappel, HestiaCP (tout comme VestaCP) sont incompatibles d'ISPConfig et de Webmin. Ils doivent être utilisés seuls

=== Installation de Webmin

Webmin est un outil généraliste de configuration de votre serveur. Son usage peut être assez complexe mais il permet une configuration plus précise des fonctionnalités.

. Se logger `root` sur le serveur
. Ajoutez le repository Webmin
.. allez dans le répertoire des repositories. Tapez :
+
[source,bash]
----
cd /etc/apt/sources.list.d
----
.. Tapez: :
+
[source,bash]
----
echo "deb http://download.webmin.com/download/repository sarge contrib" >> webmin.list
----
.. Ajoutez la clé. Tapez :
+
[source,bash]
----
curl -fsSL http://www.webmin.com/jcameron-key.asc | sudo apt-key add -.
----
Le message `OK` s'affiche
. Mise à jour. Tapez :
+
[source,bash]
----
apt update
----
. Installation de Webmin. Tapez :
+
[source,bash]
----
apt install Webmin
----
 Débloquez le port 10000 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 10000
.. Cliquez sur `save`
. Connectez vous avec votre navigateur sur l'url https://<example.com>:10000. Un message indique un problème de sécurité. Cela vient du certificat auto-signé. Cliquez sur 'Avancé' puis 'Accepter le risque et poursuivre'.
. Loguez-vous `root`. Tapez le mot de passe de `root`. Le dashboard s'affiche.
. Restreignez l'adressage IP
.. Obtenez votre adresse IP en allant par exemples sur le site https://www.showmyip.com/
.. Sur votre URL Webmin ou vous êtes logué, allez dans Webmin->Webmin Configuration
.. Dans l'écran choisir l’icône `Ip Access Control`.
.. Choisissez `Only allow from listed addresses`
.. Puis dans le champ `Allowed IP addresses` tapez votre adresse IP récupérée sur showmyip
.. Cliquez sur `Save`
.. Vous devriez avoir une brève déconnexion le temps que le serveur Webmin redémarre puis une reconnexion.
. Si vous n'arrivez pas à vous reconnecter c'est que l'adresse IP n'est pas la bonne. Le seul moyen de se reconnecter est de:
.. Loguez vous `root` sur serveur
.. Éditez le fichier /etc/webmin/miniserv.conf et supprimez la ligne `allow= ...`
.. Tapez :
+
[source,bash]
----
service webmin restart
----
.. Connectez vous sur l'url de votre site Webmin. Tout doit fonctionner
. Passez en Français. Pour les personnes non anglophone. Les traductions française ont des problèmes d'encodage de caractère ce n'est donc pas recommandé. La suite de mon tutoriel suppose que vous êtes resté en anglais.
.. Sur votre url Webmin ou vous êtes logué, allez dans Webmin->Webmin Configuration
.. Dans l'écran choisir l’icône `Language and Locale`.
.. Choisir `Display Language` à `French (FR.UTF-8)`

=== Installation et configuration de ISPConfig

ISPConfig est un système de configuration de sites web totalement compatible avec Webmin.

Pour installer ISPConfig, vous devez suivre la procédure ci-dessous. ISPConfig 3.1 a été utilisé dans ce tutoriel.

. Tapez:
+
[source,bash]
----
cd /tmp
----
. Cherchez la dernière version d'ISPConfig sur le site https://www.ispconfig.org/ispconfig/download/[ISPConfig]
. Installez cette version en tapant: :
+
[source,bash]
----
wget <la_version_a_telecharger>.tar.gz
----
. Décompressez la version en tapant: :
+
[source,bash]
----
tar xfz <la_version>.tar.gz
----
. Enfin allez dans le répertoire d'installation: :
+
[source,bash]
----
cd ispconfig3_install/install/
----
. Lancez l'installation: :
+
[source,bash]
----
php -q install.php
----
et répondez aux questions:
.. `Select language (en,de) [en]:` <- Tapez entrée
.. `Installation mode (standard,expert) [standard]:` <- Tapez entrée
.. `Full qualified hostname (FQDN) of the server, eg server1.domain.tld [server1.example.com]:` <- Tapez entrée
.. `MySQL server hostname [localhost]:` <- Tapez entrée
.. `MySQL server port [3306]:` <- Tapez entrée
.. `MySQL root username [root]:` <- Tapez entrée
.. `MySQL root password []:` <- Enter your MySQL root password
.. `MySQL database to create [dbispconfig]:` <- Tapez entrée
.. `MySQL charset [utf8]:` <- Tapez entrée
.. `Country Name (2 letter code) [AU]:` <- Entrez le code pays à 2 lettres
.. `State or Province Name (full name) [Some-State]:` <- Entrer le nom d'état
.. `Locality Name (eg, city) []:` <- Entrer votre ville
.. `Organization Name (eg, company) [Internet Widgits Pty Ltd]:` <- Entrez votre entreprise ou tapez entrée
.. `Organizational Unit Name (eg, section) []:` <- Tapez entrée
.. `Common Name (e.g. server FQDN or YOUR name) []:` <- Enter le nom d'hôte de votre serveur. Dans notre cas: server1.example.com
.. `Email Address []:` <- Tapez entrée
.. `ISPConfig Port [8080]:` <- Tapez entrée
.. `Admin password [admin]:` <- Tapez entrée
.. `Do you want a secure (SSL) connection to the ISPConfig web interface (y,n) [y]:` <-- Tapez entrée
.. une deuxième série de question du même type est posée répondre de la même manière !
. Sécurisez Apache
.. Il est maintenant recommandé de désactiver les protocoles TLS 1.0 et TLS 1.1. Ce n'est pas la configuration par défaut d'ISPconfig
.. Se loguer `root` sur le serveur.
.. Copier le fichier `vhost.conf.master` dans la zone custom
+
[source,bash]
----
cp /usr/local/ispconfig/server/conf/vhost.conf.master /usr/local/ispconfig/server/conf-custom/vhost.conf.master
----
.. Editer le fichier dans la zone custom. Tapez `vi /usr/local/ispconfig/server/conf-custom/vhost.conf.master`.
.. Remplacez la ligne `SSLProtocol All` par `SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1`
.. Régénérez la configuration des serveurs web. Allez dans `Tools` -> `Resync`. Sélectionnez `Websites`.cliquez sur `start`
. L'installation est terminée. Vous accédez au serveur à l'adresse: https://example.com:8080/ .
+
[NOTE]
Lors de votre première connexion, votre domaine n'est pas encore configuré. Il faudra alors utiliser le nom DNS donné par votre hébergeur. Pour OVH, elle s'écrit VPSxxxxxx.ovh.net
. Loguez vous comme admin et avec le mot de passe que vous avez choisi. Vous pouvez décider de le changer au premier login
+
[NOTE]
Si le message "Possible attack detected. This action has been logged.". Cela signifie que vous avez des cookies d'une précédente installation qui sont configurés. Effacer les cookies de ce site de votre navigateur.

[#domain-config]
== Configuration d'un domaine

Cette configuration est réalisée avec le Panel ISPConfig installé dans le chapitre précédent.
L'étape "login initial" n'est à appliquer qu'une seule fois. Une fois votre premier domaine configuré, vous pourrez vous loguer à ISPconfig en utilisant ce domaine à l'adresse: https://example.com:8080/ .

=== Login initial

[NOTE]
Cette procédure n'est à appliquer que lorsqu'aucun domaine n'est encore créé.

Vous devrez tout d'abord vous loguer sur le serveur ISPConfig.
Comme vous n'avez pas encore configuré de nom de de domaine, vous devrez vous loguer de prime abord sur le site http://vpsxxxxxx.ovh.net:8080/ .

Utiliser le login: Admin et le mot de passe que vous avez configuré lors de l'installation d'ISPConfig

. Aller dans l'onglet `System`
.. Dans le menu `Main config`
... Dans l’onglet `Sites`, configurer:
.... `Create subdomains as web site:` <- Yes
.... `Create aliasdomains as web site:` <- Yes
... Dans l'onglet `Mail` :
.... `Administrator's e-mail :` <- adresse mail de l’administrateur. par exemple admin@example.com
.... `Administrator's name :` <- nom de l’administrateur

[NOTE]
Il est possible de basculer le site ISPConfig entièrement en Français. J'ai pour ma part gardé la version anglaise du site.
Vous trouverez donc tous les libellés dans la suite de la documentation en anglais.

=== Création de la zone DNS d'un domaine

. Allez dans `DNS`
.. Cliquez sur `Add dns-zone`
.. Cliquez sur `Dns zone wizard`
.. Choisir le template par défaut.
.. Remplissez les champs:
*** `Domain :` <- tapez le nom de votre domaine `example.com`
*** `IP Address:` <- prendre l’adresse du serveur sélectionnée
*** `NS1 :` <- ns1.example.com
*** `NS2 :` <- ns2.example.com
*** `Email:` <- votre Email valide exemple admin@example.com
*** `DKIM:` <- Yes
.. Cliquez sur `Create DNS-record`

=== Ajout d'enregistrements DNS

Allez maintenant dans l'onglet `Records` de la zone DNS.
J'y ai ajouté quelques enregistrements complémentaires:

. Des enregistrements de type A (définissent des domaines principaux) :
** `Hostname:` <- `autoconfig` et `IP-Address:` <- <IP> de votre serveur 
** `Hostname:` <- `autodicover` et `IP-Address:` <- <IP> de votre serveur
** `Hostname:` <- `webmail` et `IP-Address:` <- <IP> de votre serveur
. Des enregistrements de type CNAME (définissent des alias de domaines) :
** `Hostname:` <- `ftp` et `IP-Address:` <- `example.com` 
** `Hostname:` <- `smtp` et `IP-Address:` <- `example.com` 
** `Hostname:` <- `pop3` et `IP-Address:` <- `example.com` 
** `Hostname:` <- `imap` et `IP-Address:` <- `example.com` 
. Des enregistrements de type SRV (définissent des services) :
** `Hostname:` <- `_pop3._tcp`, `Target:` <- `.`, `Weight:` <- 0, `Port:` <- 0
** `Hostname:` <- `_imap._tcp`, `Target:` <- `.`, `Weight:` <- 0, `Port:` <- 0
** `Hostname:` <- `_pop3s._tcp`, `Target:` <- `mail.example.com`, `Weight:` <- 1, `Port:` <- 995, `Priority:` <- 10
** `Hostname:` <- `_imaps._tcp`, `Target:` <- `mail.example.com`, `Weight:` <- 1, `Port:` <- 993
** `Hostname:` <- `_submission._tcp`, `Target:` <- `mail.example.com`, `Weight:` <- 1, `Port:` <- 465
** `Hostname:` <- `_autodiscover._tcp`, `Target:` <- `autoconfig.example.com`, `Weight:` <- 0, `Port:` <- 443

Attendez quelques minutes le temps que les enregistrements DNS se propagent et faites une essai de votre nom de domaine sur le site https://zonemaster.fr/domain_check[ZoneMaster].

Dans le champ Nom de domaine saisissez votre nom de domaine et tapez sur check. Tout doit est OK sauf pour les serveurs de noms ns1 et ns2. Si ce n'est pas le cas, votre nom de domaine doit être mal configuré chez votre registrar. Il vous faut vérifier la configuration initiale.

[NOTE]
Zonemaster a bien repéré que l'on a essayé de mettre des noms de host différents pour les serveurs de DNS. Ils ont cependant tous la même adresse IP. Cela apparait comme une erreur suite au test.
De la même manière, il indique dans la rubrique connectivité qu'il n'y a pas de redondance de serveur DNS.
Une manière de corriger ce problème est de définir un DNS secondaire chez OVH en utilisant le service qu'ils mettent à disposition.

Vous pouvez maintenant essayer les différents Hostname munis de leur nom de domaine dans votre navigateur. Par exemple: http://webmail.example.com

Ils doivent afficher une page web basique (Apache2, ou de parking).Si ce n'est pas le cas revérifier la configuration du DNS dans ISPConfig.

=== Activation de DNSSEC

Vous pouvez maintenant activer DNSSEC afin d'augmenter la sécurité de résolution de nom de domaine:

. Allez dans la rubrique `DNS`
.. puis dans le menu `Zones`
.. choisissez la zone correspondant à votre domaine
.. dans l'onglet `DNS Zone` allez tout en bas et activer la coche `Sign Zone (DNSSEC)`
.. cliquez sur `Save`
.. Une fois fait, retourner dans le même onglet. La boite `DNSSEC DS-Data for registry: `contient les informations que vous devez coller dans le site web de votre registrar pour sécuriser votre zone.
.. Gardez cette fenêtre ouverte dans votre navigateur et ouvrez un autre onglet sur le site de votre registrar.

Si vous êtes chez https://admin.gandi.net/[Gandi], il vous faut:

. Sélectionner le menu `nom de domaine`
. Choisir votre nom de domaine "example.com"
. Allez dans l'onglet DNSSEC. Il doit permettre d'ajouter des clés puisque vous fonctionner avec des DNS externes.
. Effacez éventuellement toutes les clés si vous n'êtes pas sur de celles-ci.
. puis cliquez sur `Ajouter une clé externe`
.. Sélectionnez d'abord le flag `257 (KSK)`. puis l'algorithme `7 (RSASHA1-NSEC3-SHA1)`
.. Collez ensuite la clé de votre site ISPConfig. Elle doit ressembler à cela:
+
----
example.com. IN DNSKEY 257 3 7 AwEAAcs+xTC5GlyC8CSufM9U7z5uazLNmNP3vG2txzNIGM1VJHWCpRYQVZjsBZqx5vZuOFBwp0F6cpF8YdW9QibZc82UAeIYAstgRSwnCLYsIV+3Zq0NpCcnGTkPLknxxZuN3MD5tARkxBM5c5fME0NgMU+kcx4xaTVm2Go6bEeFuhgNfRogzXKqLV6h2bMCajudfJbbTbJlehym2YegLI+yYCpYr6b+jWHorRoUVDJ41OPXLtz2s8wtycyINpZsdmLNJhNNaeGqOok3+c5uazLNmNP3vG2txzNIGLM1VJHWCpRYQVZjsBZkqx5vZuOFBgwp0F6cpF8YdW9QbZc82UAeIYAstKgRSwnCLYsIV+3Zq0NpCcnGTkPLkn
----
.. Cliquez sur `Ajouter`
.. Entrez la deuxième clé. Cliquez sur `Ajouter une clé externe`
.. Sélectionnez d'abord le flag `256 (ZSK)`. puis l'algorithme `7 (RSASHA1-NSEC3-SHA1)`
.. Collez ensuite la clé de votre site ISPConfig. Elle doit ressembler à cela:
+
----
example.com. IN DNSKEY 256 3 7 AwEAAcs+xTC5GlyC8CSufM9U7z5uazLNmNP3vG2txzNIGM1VJHWCpRYQVZjsBZqx5vZuOFBwp0F6cpF8YdW9QibZc82UAeIYAstgRSwnCLYsIV+3Zq0NpCcnGTkPLknxxZuN3MD5tARkxBM5c5fME0NgMU+kcx4xaTVm2Go6bEeFuhgNfRogzXKqLV6h2bMCajudfJbbTbJlehym2YegLI+yYCpYr6b+jWHorRoUVDJ41OPXLtz2s8wtycyINpZsdmLNJhNNaeGqOok3+c5uazLNmNP3vG2txzNIGLM1VJHWCpRYQVZjsBZkqx5vZuOFBgwp0F6cpF8YdW9QbZc82UAeIYAstKgRSwnCLYsIV+3Zq0NpCcnGTkPLkn
----
.. Cliquez sur `Ajouter`
.. Les deux clés doivent maintenant apparaître dans l'onglet `DNSSEC`
.. Vous devez attendre quelques minutes (une heure dans certains cas) pour que les clés se propagent. Pendant ce temps vous pouvez avoir quelques problèmes d'accès à vos sites webs
.. Allez sur le site https://dnssec-debugger.verisignlabs.com/[DNSSEC Analyzer].
.. Entrez votre nom de domaine "example.com" et tapez sur "entrée".

Le site doit afficher pour les différentes zones le statut des certificats. Tout doit être au vert.
Si ce n'est pas le cas, réessayer dans une heure. S'il y a encore des problèmes vérifiez votre configuration dans ISPConfig, chez votre registrar (rubrique DNSSEC) ou regardez les logs d'ISPConfig sur votre serveur pour y débusquer une erreur.

[TIP]
Une erreur classique est de croiser les certificats avec leurs types. Vérifiez bien que vous avez mis les bons certificats avec les bons types.


[WARNING]
Une fois que vous activez DNSSEC, vous pourriez faire face au problème suivant: les nouveaux enregistrements que vous renseignez ne sont pas actifs.
Une analyse des logs montre que la commande `dnssec-signzone` retourne l'erreur `fatal: 'example.com': found DS RRset without NS RRset`.
Cela signifie que vous avez saisi une ou deux entrées DS dans vos enregistrements. Il faut les supprimer pour que tout redevienne fonctionnel.

=== Exemple de configuration de domaine

Une fois la configuration terminé, les différents enregistrements du domaines ressemblent à l'exemple ci-dessous.
Il peut y avoir des enregistrements supplémentaires pour les configurations SPF, DKIM et Let's encrypt.

-----
example.com.         3600 A              1.2.3.4
www                  3600 A              1.2.3.4
mail                 3600 A              1.2.3.4
ns1                  3600 A              1.2.3.4
ns2                  3600 A              1.2.3.4
webmail              3600 A              1.2.3.4
autoconfig           3600 A              1.2.3.4
autodiscover         3600 A              1.2.3.4
ftp                  3600 CNAME          example.com.
smtp                 3600 CNAME          mail.example.com.
pop3                 3600 CNAME          mail.example.com.
imap                 3600 CNAME          mail.example.com.
example.com.         3600 NS             ns1.example.com.
example.com.         3600 NS             ns2.example.com.
example.com.         3600 MX    10       mail.example.com.
_pop3s._tcp          3600 SRV   10 1 995 mail.example.com.
_imaps._tcp          3600 SRV   0  1 993 mail.example.com.
_submission._tcp     3600 SRV   0  1 465 mail.example.com.
_imap._tcp           3600 SRV   0  0 0   .
_pop3._tcp           3600 SRV   0  0 0   .
_autodiscover._tcp   3600 SRV   0 0 443  autoconfig.example.com.
example.com.         3600 TXT            "v=spf1 mx a ~all"
-----
[#domain-site]
=== Création d’un site web

Dans la suite le site web sera nommé "example.com".

Vous devez avoir avant tout défini le "record" DNS associé au site.

. Aller dans "Sites"
.. Aller dans le menu "Website" pour définir un site web
... Cliquez sur "Add new website"
... Saisissez les informations:
**** `Domain:` <- mettre `example.com`
**** `Auto-subdomain:` <- sélectionner `wwww` ou `*` si l’on veut un certificat let’s encrypt wildcard
**** `SSL:` <- yes
**** `Let’s Encrypt:` <- yes
**** `Php:` <- Sélectionez `php-fpm`
**** Sélectionnez éventuellement aussi les coches `Perl`, `Python`, `Ruby` en fonction des technologies déployées sur votre site. Cela est indiqué dans la procédure d'installation du site.
... Dans l’onglet `redirect` du même écran
**** `SEO Redirect:` <- Sélectionner `domain.tld =>www.domain.tld`
**** `Rewrite http to https:` <- yes
... Dans l’onglet `Statistics` du même écran
**** `Set Webstatistics password:` <- saisissez un mot de passe
**** `Repeat Password:` <- ressaisissez le mot de passe
... Dans l’onglet `Backup` du même écran
**** `Backup interval:` <- saisir `weekly`
**** `Number of backup copies:` <- saisir `1`
... Dans l'onglet `Options`, il peut être utile pour certains types de site qui sont des redirections d'autres sites de saisir dans la zone `Apache Directives:`
+
[source, apache]
----
ProxyPass "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# redirect from server
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://127.0.0.1[:port_number_if_any]/[path_if_any]
ProxyPassReverse / http://127.0.0.1[:port_number_if_any]/[path_if_any]
----
. Vous pouvez maintenant tester la qualité de la  connexion de votre site en allant sur: https://www.ssllabs.com/ssltest[SSL Server Test]. Saisissez votre nom de domaine et cliquez sur `Submit`. Votre site doit au moins être de `Grade A`.

[#subdomain-site]
=== Création d’un Site Vhost

Dans la suite le sous-domaine sera nommé "site.example.com".

Vous devez avoir avant tout défini le "record" DNS associé au site.
Vous ne pouvez définir un sous-domaine que si vous avez défini le site web racine auparavant.

. Aller dans "Sites"
.. Aller dans le menu "Subdomain(vhost)" pour définir un sous-domaine
... Cliquez sur "Add Subdomain" pour un nouveau sous domaine
... Saisissez les informations:
**** `Hostname:` <-  saisir `site` 
**** `Domain:` <- mettre `example.com`
**** `web folder:` <- saisir `site`
**** `Auto-subdomain:` <- sélectionner `wwww` ou `*` si l’on veut un certificat let’s encrypt wildcard
**** `SSL:` <- yes
**** `Let’s Encrypt:` <- yes
**** `Php:` <- Sélectionez `php-fpm`
**** Sélectionnez éventuellement aussi les coches `Perl`, `Python`, `Ruby` en fonction des technologies déployées sur votre site. Cela est indiqué dans la procédure d'installation du site.
... Dans l’onglet `redirect` du même écran
**** `Rewrite http to https:` <- yes
... Dans l’onglet `Statistics` du même écran
**** `Set Webstatistics password:` <- saisissez un mot de passe
**** `Repeat Password:` <- ressaisissez le mot de passe
... Dans l'onglet `Options`, il peut être utile pour certains types de site qui sont des redirections d'autres sites de saisir dans la zone `Apache Directives:`
+
[source, apache]
----
ProxyPass "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# redirect from server
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://127.0.0.1[:port_number_if_any]/[path_if_any]
ProxyPassReverse / http://127.0.0.1[:port_number_if_any]/[path_if_any]
----
. Vous pouvez maintenant tester la qualité de la  connexion de votre site en allant sur: https://www.ssllabs.com/ssltest[SSL Server Test]. Saisissez votre nom de domaine et cliquez sur `Submit`. Votre site doit au moins être de `Grade A`.

=== Associer des certificats reconnu à vos outils

Comme vous avec créé votre premier domaine avec SSL et let's encrypt dans ISPConfig, vous pouvez maintenant, affecter ce certificat aux services de base:

. Vous devez avoir créé au préalable un site pour les domaines 
. Liez le certificat d'ISPconfig avec celui du domaine crée
** Tapez :
+
[source,bash]
----
cd /usr/local/ispconfig/interface/ssl/
mv ispserver.crt ispserver.crt-$(date +"%y%m%d%H%M%S").bak
mv ispserver.key ispserver.key-$(date +"%y%m%d%H%M%S").bak
ln -s /etc/letsencrypt/live/example.com/fullchain.pem ispserver.crt <1>
ln -s /etc/letsencrypt/live/example.com/privkey.pem ispserver.key <1>
cat ispserver.{key,crt} > ispserver.pem
chmod 600 ispserver.pem
systemctl restart apache2
----
<1> remplacer <example.com> par votre nom de domaine

. Liez le certificat Postfix et Dovecot avec celui de let's encrypt
** Tapez :
+
[source,bash]
----
cd /etc/postfix/
mv smtpd.cert smtpd.cert-$(date +"%y%m%d%H%M%S").bak
mv smtpd.key smtpd.key-$(date +"%y%m%d%H%M%S").bak
ln -s /etc/letsencrypt/live/mail.example.com/fullchain.pem smtpd.cert
ln -s /etc/letsencrypt/live/mail.example.com/privkey.pem smtpd.key
service postfix restart
service dovecot restart
----
. Liez le certificat pour Pureftd
** Tapez :
+
[source,bash]
----
cd /etc/ssl/private/
mv pure-ftpd.pem pure-ftpd.pem-$(date +"%y%m%d%H%M%S").bak
ln -s /usr/local/ispconfig/interface/ssl/ispserver.pem pure-ftpd.pem
chmod 600 pure-ftpd.pem
service pure-ftpd-mysql restart
----
. Création d'un script de renouvellement automatique du fichier pem
.. Installez incron. Tapez :
+
[source,bash]
----
apt install -y incron
----
.. Créez le fichier d'exécution périodique. Tapez :
+
[source,bash]
----
vi /etc/init.d/le_ispc_pem.sh
----
et coller dans le fichier le code suivant:
+
[source,bash]
-----
#!/bin/sh
### BEGIN INIT INFO
# Provides: LE ISPSERVER.PEM AUTO UPDATER
# Required-Start: $local_fs $network
# Required-Stop: $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: LE ISPSERVER.PEM AUTO UPDATER
# Description: Update ispserver.pem automatically after ISPC LE SSL certs are renewed.
### END INIT INFO
cd /usr/local/ispconfig/interface/ssl/
mv ispserver.pem ispserver.pem-$(date +"%y%m%d%H%M%S").bak
cat ispserver.{key,crt} > ispserver.pem
chmod 600 ispserver.pem
chmod 600 /etc/ssl/private/pure-ftpd.pem
service pure-ftpd-mysql restart
service monit restart
service postfix restart
service dovecot restart
service apache2 restart
exit 1
-----
.. Sauvez et quittez. Tapez ensuite:
+
[source,bash]
----
chmod +x /etc/init.d/le_ispc_pem.sh
echo "root" >> /etc/incron.allow
incrontab -e.
----
et ajoutez les lignes ci dessous dans le fichier:
+
[source,bash]
-----
/etc/letsencrypt/archive/example.com/ IN_MODIFY /etc/init.d/le_ispc_pem.sh <1>
-----
<1> Remplacer example.com par votre nom de domaine.

== Surveillance du serveur avec Munin et Monit

=== Note préliminaire

Installez tout d'abord les paquets insdispensables pour faire fonctionner Munin avec Apache puis activez le module fcgid:

[source,bash]
----
apt-get install apache2 libcgi-fast-perl libapache2-mod-fcgid
a2enmod fcgid
----

=== Installation et configuration de Munin

Suivez les étapes ci-après:

. Installer le paquet Munin:
+
[source,bash]
----
apt-get install munin munin-node munin-plugins-extra
----
. Votre configuration de Munin va utiliser une base de données MariaDB. Vous devez activer quelques plugins. Tapez:
+
[source,bash]
----
cd /etc/munin/plugins
ln -s /usr/share/munin/plugins/mysql_ mysql_
ln -s /usr/share/munin/plugins/mysql_bytes mysql_bytes
ln -s /usr/share/munin/plugins/mysql_innodb mysql_innodb
ln -s /usr/share/munin/plugins/mysql_isam_space_ mysql_isam_space_
ln -s /usr/share/munin/plugins/mysql_queries mysql_queries
ln -s /usr/share/munin/plugins/mysql_slowqueries mysql_slowqueries
ln -s /usr/share/munin/plugins/mysql_threads mysql_threads
----
. Editez ensuite le fichier de configuration de Munin. Tapez:
+
[source,bash]
----
vi /etc/munin/munin.conf
----
. Décommentez les lignes débutant par: `bdir`, `htmldir`, `logdir`, `rundir`, and `tmpldir`. Les valeurs par défaut sont correctes.
. Munin utilisera l'adresse `munin.example.com`. Toujours dans le fichier de configuration de munin, remplacer la directive `[localhost.localdomain]` par `[munin.example.com]`.
. Un fois les commentaires enlevés et la ligne modifiée, le fichier de configuration doit ressembler à celui-ci:
+
----
# Example configuration file for Munin, generated by 'make build'
# The next three variables specifies where the location of the RRD
# databases, the HTML output, logs and the lock/pid files. They all
# must be writable by the user running munin-cron. They are all
# defaulted to the values you see here.
#
dbdir /var/lib/munin
htmldir /var/cache/munin/www
logdir /var/log/munin
rundir /var/run/munin
# Where to look for the HTML templates
#
tmpldir /etc/munin/templates
# Where to look for the static www files
#
#staticdir /etc/munin/static
# temporary cgi files are here. note that it has to be writable by
# the cgi user (usually nobody or httpd).
#
# cgitmpdir /var/lib/munin/cgi-tmp

# (Exactly one) directory to include all files from.
includedir /etc/munin/munin-conf.d
[...]
# a simple host tree
[server1.example.com]
 address 127.0.0.1
 use_node_name yes
[...]
----
. Activez Munin dans Apache. Tapez:
+
[source,bash]
----
a2enconf munin
----
. Editez le fichier munin.conf d'Apache:
+
[source,bash]
----
vi /etc/apache2/conf-enable/munin.conf
----
. Nous allons maintenant activer le module Munin dans Apache et définir une authentification basique. 
. Modifiez le fichier pour qu'il ressemble à celui ci-dessous:
+
[source,apache]
----
ScriptAlias /munin-cgi/munin-cgi-graph /usr/lib/munin/cgi/munin-cgi-graph
Alias /munin/static/ /var/cache/munin/www/static/

<Directory /var/cache/munin/www>
    Options FollowSymLinks SymLinksIfOwnerMatch
    AuthUserFile /etc/munin/munin-htpasswd
    AuthName "Munin"
    AuthType Basic
    Require valid-user

</Directory>

<Directory /usr/lib/munin/cgi>
    AuthUserFile /etc/munin/munin-htpasswd
    AuthName "Munin"
    AuthType Basic
    Require valid-user
    Options FollowSymLinks SymLinksIfOwnerMatch
    <IfModule mod_fcgid.c>
        SetHandler fcgid-script
    </IfModule>
    <IfModule !mod_fcgid.c>
        SetHandler cgi-script
    </IfModule>
</Directory>

# ***** SETTINGS FOR CGI/CRON STRATEGIES *****

# pick _one_ of the following lines depending on your "html_strategy"
# html_strategy: cron (default)
Alias /munin /var/cache/munin/www
# html_strategy: cgi (requires the apache module "cgid" or "fcgid")
#ScriptAlias /munin /usr/lib/munin/cgi/munin-cgi-html
----
. Créez ensuite le fichier de mot de passe de munin:
+
[source,bash]
----
htpasswd -c /etc/munin/munin-htpasswd admin
----
. Tapez votre mot de passe
. Redémarrez apache. Tapez:
+
[source,bash]
----
service apache2 restart
----
. Redémarrez Munin. Tapez:
+
[source,bash]
----
service munin-node restart
----
. Attendez quelques minutes afin que Munin produise ses premiers fichiers de sortie. et allez ensuite sur l'URL: http://example.com/munin/.

=== Activez les plugins de Munin

Dans Debian 10, tous les plugins complémentaires sont déjà activés.Vous pouvez être tenté de vérifier:

. Pour vérifier que la configuration est correcte. Tapez:
+
[source,bash]
----
munin-node-configure --suggest
----
. Une liste de plugins doit s'afficher à l'écran. La colonne `used` indique que le plugins est activé. La colonne `Suggestions` indique que le serveur fait fonctionner un service qui peut être monitoré par ce module. Il faut créer un lien symbolique du module dans`/etc/munin/plugins` pour l'activer.
. Par exemple pour activer les modules apache_*:
+
[source,bash]
----
cd /etc/munin/plugins
ln -s /usr/share/munin/plugins/apache_accesses
ln -s /usr/share/munin/plugins/apache_processes
ln -s /usr/share/munin/plugins/apache_volume
----
. Redémarrez ensuite le service Munin. Tapez: 
+
[source,bash]
----
service munin-node restart
----

=== Installer et configurer Monit

Pour installer et configurer Monit, vous devez appliquer la procédure suivante:

. Tapez:
+
[source,bash]
----
apt install monit
----
. Maintenant nous devons éditer le fichier `monitrc` qui définira les services que l'on souhaite monitorer. Il existe de nombreux exemples sur le web et vous pourrez trouver de nombreuses configuration sur http://mmonit.com/monit/documentation/.
. Editez le fichier monitrc. Tapez:
+
[source,bash]
----
cp /etc/monit/monitrc /etc/monit/monitrc_orig
vi /etc/monit/monitrc
----
. Le fichier contient déjà de nombreux exemples. Nous configurer une surveillance de sshd, apache, mysql, proftpd, postfix, memcached, named, ntpd, mailman, amavisd, dovecot. Monit  sera activé sur le port 2812 et nous allons donner à l'utilisateur  admin un mot de passe. Le certificat HTTPS sera celui généré avec let's encrypt pour le site ISPConfig. Collez le contenu ci dessous dans le fichier monitrc:
+
----
set daemon 60
set logfile syslog facility log_daemon
set mailserver localhost
set mail-format { from: monit@fpvview.site }
set alert stef@fpvview.site
set httpd port 2812 and
 SSL ENABLE
 PEMFILE /usr/local/ispconfig/interface/ssl/ispserver.pem
 allow admin:"my_password" <1>

check process sshd with pidfile /var/run/sshd.pid
 start program "/usr/sbin/service ssh start"
 stop program "/usr/sbin/service ssh stop"
 if failed port 22 protocol ssh then restart
 if 5 restarts within 5 cycles then timeout

check process apache with pidfile /var/run/apache2/apache2.pid
 group www
 start program = "/usr/sbin/service apache2 start"
 stop program = "/usr/sbin/service apache2 stop"
 if failed host localhost port 80 protocol http
 and request "/monit/token" then restart
 if cpu is greater than 60% for 2 cycles then alert
 if cpu > 80% for 5 cycles then restart
 if totalmem > 500 MB for 5 cycles then restart
 if children > 250 then restart
 if loadavg(5min) greater than 10 for 8 cycles then stop
 if 3 restarts within 5 cycles then timeout
 
# ---------------------------------------------------------------------------------------------
# NOTE: Replace example.pid with the pid name of your server, the name depends on the hostname
# ---------------------------------------------------------------------------------------------
check process mysql with pidfile /var/run/mysqld/mysqld.pid
 group database
 start program = "/usr/sbin/service mysql start"
 stop program = "/usr/sbin/service mysql stop"
 if failed host 127.0.0.1 port 3306 then restart
 if 5 restarts within 5 cycles then timeout

check process proftpd with pidfile /var/run/pure-ftpd/pure-ftpd.pid
 start program = "/usr/sbin/service pure-ftpd-mysql start"
 stop program = "/usr/sbin/service pure-ftpd-mysql stop"
 if failed port 21 protocol ftp then restart
 if 5 restarts within 5 cycles then timeout

check process postfix with pidfile /var/spool/postfix/pid/master.pid
 group mail
 start program = "/usr/sbin/service postfix start"
 stop program = "/usr/sbin/service postfix stop"
 if failed port 25 protocol smtp then restart
 if 5 restarts within 5 cycles then timeout

check process memcached with pidfile /var/run/memcached/memcached.pid
 start program = "/usr/sbin/service memcached start"
 stop program = "/usr/sbin/service memcached stop"
 if failed host 127.0.0.1 port 11211 then restart

check process named with pidfile /var/run/named/named.pid
 start program = "/usr/sbin/service bind9 start"
 stop program = "/usr/sbin/service bind9 stop"
 if failed host 127.0.0.1 port 53 type tcp protocol dns then restart
 if failed host 127.0.0.1 port 53 type udp protocol dns then restart
 if 5 restarts within 5 cycles then timeout

check process ntpd with pidfile /var/run/ntpd.pid
 start program = "/usr/sbin/service ntp start"
 stop program = "/usr/sbin/service ntp stop"
 if failed host 127.0.0.1 port 123 type udp then restart
 if 5 restarts within 5 cycles then timeout

check process mailman with pidfile /var/run/mailman/mailman.pid
 group mail
 start program = "/usr/sbin/service mailman start"
 stop program = "/usr/sbin/service mailman stop"

check process amavisd with pidfile /var/run/amavis/amavisd.pid
 group mail
 start program = "/usr/sbin/service amavis start"
 stop program = "/usr/sbin/service amavis stop"
 if failed port 10024 protocol smtp then restart
 if 5 restarts within 5 cycles then timeout

check process dovecot with pidfile /var/run/dovecot/master.pid
 group mail
 start program = "/usr/sbin/service dovecot start"
 stop program = "/usr/sbin/service dovecot stop"
 if failed host localhost port 993 type tcpssl sslauto protocol imap then restart
 if 5 restarts within 5 cycles then timeout
----
<1> remplacez my_password par votre mot de passe

. La configuration est assez claire à lire. pour obtenir des précisions, référez vous à la documentation de monit http://mmonit.com/monit/documentation/monit.html.
. Dans la configuration pour apache, la configuration indique que monit doit allez chercher sur le port 80 un fichier dans `/monit/token`. Nous devons donc créer ce fichier. Tapez:
+
[source,bash]
----
mkdir /var/www/html/monit
echo "hello" > /var/www/html/monit/token
----
. Tapez :
+
[source,bash]
----
service monit restart
----
. Pour monitorer le statut des process en ligne de commande, tapez:
+
[source,bash]
----
monit status
----
. Débloquez le port 2812 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 2812
.. Cliquez sur `save`
. Maintenant naviguez sur le site https://example.com:2812/
. Rentrez le login `admin` et votre mot de passe `my_password`. Monit affiche alors les informations de monitoring du serveur.

== Configuration de la messagerie

=== Installation de rspamd à la place d' Amavis-new

`rspamd` est réputé de meilleure qualité que `Amavis` dans la chasse aux spams. Vous pouvez décider de l'installer à la place d'Amavis. Cette installation reste optionnelle.

Suivez la procédure suivante:

. Loguez vous sur le serveur en tant que `root`
. Installez les paquets debian. tapez:
+
[source,bash]
----
apt-get install rspamd redis-server
----
.Activez Redis dans la configuration de Rspamd. Tapez:
+
[source,bash]
----
echo 'servers = "127.0.0.1";' > /etc/rspamd/local.d/redis.conf
----
. Augmentez la taille de l'historique de Rspamd, activez la compression.
+
[source,bash]
----
echo "nrows = 2500;" > /etc/rspamd/local.d/history_redis.conf 
echo "compress = true;" >> /etc/rspamd/local.d/history_redis.conf
echo "subject_privacy = false;" >> /etc/rspamd/local.d/history_redis.conf
----
. Créez un mot de passe:
+
[source,bash]
----
rspamadm pw
----
. Entrez votre mot de passe. Une hashphrase est générée.
. Copiez la.
. Remplacez celle déjà présente dans `/etc/rspamd/local.d/worker-controller.inc`
+
[source,bash]
----
vi /etc/rspamd/local.d/worker-controller.inc
----
. Remplacez le texte entre guillemets sur la ligne `password = "$2$g95yw......dq3c5byy";` par le texte copié.
. Sauvez
. Redémarrez Rspamd
+
[source,bash]
----
systemctl restart rspamd
----
. Loguez vous dans ISPConfig
. Activer Rspamd dans ISPConfig
.. Allez dans la rubrique `system` -> menu `Server Config` -> Sélectionnez votre serveur -> Onglet `Mail`
.. Dans le champ `Content Filter`, sélectionnez `Rspamd`
.. Cliquez sur `Save`
.. Revenez dans la rubrique `system` -> menu `Server Config` -> Sélectionnez votre serveur -> Onglet `Mail`
.. Vous pouvez voir le mot de passe de connexion au serveur web Rspamd.
. Rendre le site rspamd accessible dans un host
. Activez le module proxy dans apache
+
[source,bash]
----
a2enmod proxy
systemctl restart apache2
----
. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `rspamd`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de `sites`.
.. Lui donner le nom `rspamd`.
.. Le faire pointer vers le web folder `rspamd`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
ProxyPass "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# rspamd httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://127.0.0.1:11334/
ProxyPassReverse / http://127.0.0.1:11334/
----
. en pointant sur le site rspampd.example.com, et en utilisant le mot de passe saisi plus haut vous pouvez accèder aux fonctions de l'outil.
. Enfin, vous pouvez désactiver amavisd si vous le souhaitez. tapez:
+
[source,bash]
----
systemctl stop amavisd-new
systemctl disable amavisd-new
----

=== Création du serveur de messagerie

Pour créer un serveur de messagerie:

. Assurez vous d'avoir créé le domaine DNS. Si ce n'est pas le cas déroulez tout d'abord la procédure de <<domain-config, création de domaines>>
. Aller dans la rubrique `Email`. Sélectionnez ensuite le menu `Domain`
. Cliquez sur `Add new Domain`
. Saisissez le nom de domaine.
. Cliquez sur `DomainKeys Indentified Mail (DKIM)`
. Cliquez sur `enable DKIM`
. Cliquez sur `Generate DKIM Private-key`
. Une fois cela fait, retourner dans la gestion des `Records` de domaine et activer le type DMARC
. Garder le paramétrage par défaut et sauvegardez.
. Faites de même pour les enregistrements SPF mais sélectionnez le mécanisme softfail.
. Votre serveur est créé et protégé Contre les spams (entrants et sortants).
. Vous pouvez le tester en allant sur le site https://mxtoolbox.com/diagnostic.aspx[MxToolbox].
** Entrez le nom de host de votre serveur de mail: mail.example.com.
** cliquez sur `test Email Server`
** Tout doit être correct sauf éventuellement le reverse DNS qui ne doit pas pointer sur le nom de domaine.

=== Création de l’autoconfig pour Thunderbird et Android

La procédure est utilisé par Thunderbird et Android pour configurer automatiquement les paramètres de la messagerie.

Appliquez la procédure suivante:

. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `autoconfig`.
.. Le faire pointer vers le web folder `autoconfig`.
.. Activer let’s encrypt ssl
.. Activer `php-FPM`
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----

AddType application/x-httpd-php .php .php3 .php4 .php5 .xml

CheckSpelling On
CheckCaseOnly Off
----
.. Sauver.
. Loguez vous sur le serveur en tant que `root`
. Dans le répertoire `/var/www/autoconfig.example.com/autoconfig/` créer un répertoire mail. Lui donner les permissions 755 et affecter les mêmes possesseurs que pour autres fichiers du répertoire. Tapez:
+
[source,bash]
----
mkdir -p /var/www/autoconfig.example.com/autoconfig/
chmod 755 /var/www/autoconfig.example.com/autoconfig/
chown web1:client0 /var/www/autoconfig.example.com/autoconfig/ <1>
----
<1> remplacer web1:client0 par les permissions du répertoire `/var/www/autoconfig.example.com`
.. A l’intérieur de ce répertoire, Editez un fichier `config-v1.1.xml`. Tapez:
+
[source,bash]
----
vi /var/www/autoconfig.example.com/autoconfig/config-v1.1.xml
----
. Y coller:
+
[source,xml]
----
<?php 
header('Content-Type: application/xml'); 
?> 
<?xml version="1.0" encoding="UTF-8"?> 

<clientConfig version="1.1"> 
 <emailProvider id="example.com"> <1>
   <domain>example.com</domain> <1>
   <displayName>Example Mail</displayName> <2>
   <displayShortName>Example</displayShortName> <3>
   <incomingServer type="imap"> 
     <hostname>mail.example.com</hostname> <1>
     <port>993</port> 
     <socketType>SSL</socketType> 
     <authentication>password-encrypted</authentication> 
     <username>%EMAILADDRESS%</username> 
   </incomingServer> 
   <incomingServer type="pop3"> 
     <hostname>mail.example.com</hostname> <1>
     <port>995</port> 
     <socketType>SSL</socketType> 
     <authentication>password-cleartext</authentication> 
     <username>%EMAILADDRESS%</username> 
   </incomingServer> 
   <outgoingServer type="smtp"> 
     <hostname>mail.example.com</hostname> <1>
     <port>465</port> 
     <socketType>SSL</socketType> 
     <authentication>password-encrypted</authentication> 
     <username>%EMAILADDRESS%</username> 
   </outgoingServer> 
   <outgoingServer type="smtp"> 
     <hostname>mail.example.com</hostname> <1>
     <port>587</port> 
     <socketType>STARTTLS</socketType> 
     <authentication>password-encrypted</authentication> 
     <username>%EMAILADDRESS%</username> 
   </outgoingServer> 
 </emailProvider> 
</clientConfig>
----
<1> mettre à la place de example.com votre nom de domaine
<2> mettre ici votre libellé long pour votre nom de messagerie
<3> mettre ici un libellé court pour votre nom de messagerie
. Donner la permission en lecture seule et affecter les groupes d'appartenance. Tapez:
+
[source,bash]
----
chmod 600 /var/www/autoconfig.example.com/autoconfig/config-v1.1.xml
chown web1:client0 /var/www/autoconfig.example.com/autoconfig/config-v1.1.xml <1>
----
<1> remplacer web1:client0 par les permissions du répertoire `/var/www/autoconfig.example.com`

=== Création d’autodiscover pour Outlook

Outlook utilise un autre mécanisme pour se configurer automatiquement. Il est basé sur l'utilisation du nom de sous-domaine `autodiscover`.

Appliquez la procédure suivante:

. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `autodiscover`.
.. Le faire pointer vers le web folder `autodiscover`.
.. Activer let’s encrypt ssl
.. Activer `php-FPM`
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
CheckSpelling On
CheckCaseOnly On
RewriteEngine On
ProxyPass "/" http://autoconfig.example.com/ <1>
ProxyPassReverse "/" http://autoconfig.example.com/ <1>
RewriteRule ^/ - [QSA,L]
----
<1> remplacer example.com par votre nom de domaine
.. Sauver.
. Loguez vous sur le serveur en tant que `root`
. Dans le répertoire `/var/www/autoconfig.example.com/autoconfig/`, créer un répertoire `Autodiscover`. Lui donner les permissions 755 et affecter les mêmes possesseurs que pour autres fichiers du répertoire. Tapez:
+
[source,bash]
----
mkdir -p /var/www/autoconfig.example.com/autoconfig/Autodiscover/
chmod 755 /var/www/autoconfig.example.com/autoconfig/Autodiscover/
chown web1:client0 /var/www/autoconfig.example.com/autoconfig/Autodiscover/ <1>
----
<1> remplacer web1:client0 par les permissions du répertoire `/var/www/autoconfig.example.com`
.. A l’intérieur de ce répertoire, Editez un fichier `Autodiscover.xml`. Tapez:
+
[source,bash]
----
vi /var/www/autoconfig.example.com/autoconfig/Autodiscover/Autodiscover.xml
----
. Y coller:
+
[source,xml]
----
<?php  
 $raw = file_get_contents('php://input'); 
 $matches = array(); 
 preg_match('/<EMailAddress>(.*)<\/EMailAddress>/', $raw, $matches); 
 header('Content-Type: application/xml');  
?> 
 <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/responseschema/2006"> 
   <Response xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a"> 
     <User>
       <DisplayName>Example Mail</DisplayName> <2>
     </User>
     <Account>
       <AccountType>email</AccountType>
       <Action>settings</Action>
       <Protocol>
         <Type>IMAP</Type>
         <Server>mail.example.com</Server> <1>
         <Port>993</Port>
         <DomainRequired>off</DomainRequired>
         <SPA>off</SPA>
         <SSL>on</SSL>
         <AuthRequired>on</AuthRequired>
         <LoginName><?php echo $matches[1]; ?></LoginName>
       </Protocol>
       <Protocol>
         <Type>SMTP</Type>
         <Server>mail.example.com</Server> <1>
         <Port>465</Port>
         <DomainRequired>off</DomainRequired>
         <SPA>off</SPA>
         <SSL>on</SSL>
         <AuthRequired>on</AuthRequired>
         <LoginName><?php echo $matches[1]; ?></LoginName>
       </Protocol>
     </Account>
   </Response>
 </Autodiscover>
----
<1> mettre à la place de example.com votre nom de domaine
<2> mettre ici votre libellé long pour votre nom de messagerie
. Pointer votre navigateur sur le site https://autodiscover.example.com/Autodiscover/Autodiscover.xml.
. Le contenu du fichier xml doit s'afficher
. Vous pouvez faire aussi un test sur le https://testconnectivity.microsoft.com[Testeur de connectivité Microsoft].
.. choisissez: `Découverte automatique Outlook`
.. cliquez sur `suivant`
.. Entrez votre adresse de courrier: `user@example.com`, un domain: `example\user`, un mot de passe tiré au hazard, Cochez les deux cases en dessous.
.. Cliquez sur `effectuer un test`
.. Le résultat doit être: `Test de connectivité réussi`

=== Création d’une boite mail

Pour créer une boite de messagerie:

. Aller dans la rubrique `Email`. Sélectionnez ensuite le menu `Email Mailbox`
. Cliquez sur `Add new Mailbox`
. Remplissez les champs suivants:
.. `Name:` <- mettez votre prénom et votre nom
.. ``Email:` <- mail_name @ votre_domaine
.. `Password:` <- saisissez un mot de passe ou générez en un
.. `Repeat Password` <- saisissez une deuxième fois votre mot de passe
.. `Quota (0 for unlimited):` <- mettez éventuellement un quota ou laissez 0 pour illimité.
.. `Spamfilter:` <- Sélectionnez `Normal`
. Dans l’onglet Backup:
.. `Backup interval:` Sélectionnez `Daily`
.. `Number of backup copies:` Sélectionnez 1
. Cliquez sur `Save`

=== Configuration de votre client de messagerie.

Saisir l'adresse mail et votre mot de passe doit suffire pour configurer automatiquement votre client de messagerie.

Si vous avez besoin de configurer votre client manuellement, voici les informations à saisir:

[options="header"]
|===
| Paramètre | Valeur
| Type de serveur | IMAP
| Nom de serveur IMAP | mail.example.com
| Nom d'utilisateur IMAP | user@example.com
| Port IMAP | 993
| Sécurité IMAP | SSL/TLS
| Authentification IMAP | Normal Password
| Nom de serveur SMTP | mail.example.com
| Nom d'utilisateur SMTP | user@example.com
| Port SMTP | 465
| Sécurité SMTP | SSL/TLS
| Authentification SMTP | Normal Password
|===

== Installation et configuration de Gitea

Gitea est un système simple d'hébergement de code basé sur Git. C'est un fork de Gogs.
Il montre des fonctionnalités similaires à gitlab ou github tout en gardant un code plus simple.

Appliquez les opérations suivantes:

. Créez un utilisateur `Gitea`. Tapez:
+
[source,bash]
----
adduser --system --disabled-password --group --shell /bin/bash --home /home/gitea gitea
----
. Créez la structure de répertoire de `Gitea`. Tapez:
+
[source,bash]
----
mkdir -p /var/lib/gitea/{data,log} /etc/gitea /run/gitea
----
. Donnez les bonnes permissions aux répertoires. Tapez:
+
[source,bash]
----
chown -R gitea:gitea /var/lib/gitea
chown -R gitea:gitea /run/gitea
chown -R root:gitea /etc/gitea
chmod -R 750 /var/lib/gitea
chmod 770 /etc/gitea
----
. Créez une base de données mysql. Aller dans le menu `Database` pour définir un utilisateur MariaDB
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `gitea` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Cliquez sur `save`
.. Cliquez sur `Add new Database` pour créer une nouvelle base de données
.. Saisissez les informations:
*** `Site:` <- sélectionner le site `example.com`
*** `Database name:` <- Saisissez le nom de la base de données `gitea`
*** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxgitea`. x: est le numéro de client.
.. Cliquez sur `save`
. Téléchargez gitea du https://dl.gitea.io/gitea/[site de chargement]. Tapez pour un système 64 bits:
+
[source,bash]
----
wget https://dl.gitea.io/gitea/master/gitea-master-linux-amd64 -O /usr/local/bin/gitea
chmod 755 /usr/local/bin/gitea
----
. Créez maintenant une entrée pour le launcher systemd. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/gitea.service
----
. y Coller le texte suivant:
+
[source,ini]
----
[Unit]
Description=Gitea (Git with a cup of tea)
After=syslog.target
After=network.target
Requires=postgresql.service
[Service]
Type=simple
User=gitea
Group=gitea
WorkingDirectory=/var/lib/gitea/
RuntimeDirectory=gitea
ExecStart=/usr/local/bin/gitea web -c /etc/gitea/app.ini
Restart=always
Environment=USER=gitea HOME=/home/gitea GITEA_WORK_DIR=/var/lib/gitea
[Install]
WantedBy=multi-user.target
----
. Recharge la base de systemd. Tapez:
+
[source,bash]
----
systemctl daemon-reload
----
. Activez et démarrez `Gitea`. Tapez:
+
[source,bash]
----
systemctl enable gitea.service
systemctl start gitea.service
----
. Débloquez le port 3000 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 3000
.. Cliquez sur `save`
. Ouvrez votre navigateur sur l'url: http://example.com:3000/install et remplissez les paramètres comme ci-après :
** `Type de base de données:` <- Sélectionnez `MySQL`
** `Nom d'utilisateur:` <- Tapez `c0gitea`
** `Mot de passe:` <-  Tapez le mot de passe saisi lors de la création de la base
** `Nom de base de données:` <- Tapez `c0gitea`
** `Titre du site:` <- mettez une titre de votre choix
** `Emplacement racine des dépôts:` <- saisissez `/home/gitea/gitea-repositories`
** `Répertoire racine Git LFS:` <- Tapez `/var/lib/gitea/data/lfs`
** `Exécuter avec le compte d'un autre utilisateur :` <- Tapez `gitea`
** `Domaine du serveur SSH:` <- Tapez votre domaine. exemple : `gitea.example.com`
** `Port du serveur SSH:` <- Tapez 22
** `Port d'écoute HTTP de Gitea:` <- Tapez 3000
** `URL de base de Gitea:` <- Tapez l'URL de votre domaine. Exemple: `https://gitea.example.com`
** `Chemin des fichiers log:` <- Tapez  `/var/lib/gitea/log`
** `Hôte SMTP:` <- Tapez `localhost`
** `Envoyer les e-mails en tant que:` <- Tapez `gitea@gitea.example.com`
** `Exiger la confirmation de l'e-mail lors de l'inscription:` <- cochez la case
** `Activez les notifications par e-mail:` <- cochez la case
** `Désactiver le formulaire d'inscription:` <- cochez la case
** `Masquer les adresses e-mail par défaut:` <- cochez la case
. Laissez le reste et cliquez sur `Install Gitea`.
. Vous allez être redirigé vers une URL en erreur. C'est normal puisque le site web n'est pas encore configuré.
. Restreignez les permissions sur le fichier de configuration de gitea. Tapez:
+
[source,bash]
----
chmod 750 /etc/gitea
chown root:gitea /etc/gitea/app.ini
chmod 640 /etc/gitea/app.ini
----
. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `gitea`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `gitea`.
.. Le faire pointer vers le web folder `gitea`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
ProxyPass "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# gitea httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://example.com:3000/ <1>
ProxyPassReverse / http://example.com:3000/ <1>
----
<1> mettez le nom de votre domaine à la place de example.com
. Redémarrez `gitea`. Tapez:
+
[source,bash]
----
systemctl restart nginx.service
----
. Si vous souhaitez avoir un serveur ssh dédié pour gitea. Editez le fichier de configuration. Tapez:
+
[source,bash]
----
vi /etc/gitea/app.ini
----
. Trouvez les lignes suivantes et les remplacer dans le fichier. Chercher et remplacez:
+
[source,bash]
----
START_SSH_SERVER = true
SSH_PORT = 2222 <1>
----
<1> mettez ici le numéro de port que vous souhaitez
. Débloquez le port 2222 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 222
.. Cliquez sur `save`
. Redémarrez `gitea`. Tapez:
+
[source,bash]
----
systemctl restart nginx.service
----
. Enjoy !

== Installation de Seafile

Seafile est un système de partage de fichier simple et efficace. Il existe des clients de connexion pour Windows, Linux, Android, IOS.

Cette installation est optionnelle.

=== Création du site web de Seafile

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `seafile`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `seafile`.
.. Le faire pointer vers le web folder `seafile`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
Alias /media {DOCROOT}/private/seafile/seafile-server-latest/seahub/media
RewriteEngine On

<Location /media>
Require all granted
</Location>

Alias /.well-known {DOCROOT}/private/seafile/.well-known
RewriteEngine On

<Location /.well-known>
Require all granted
</Location>

ProxyPass "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://127.0.0.1:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# seafile httpserver
#
ProxyPass /seafhttp http://127.0.0.1:8092
ProxyPassReverse /seafhttp http://127.0.0.1:8092
RewriteRule ^/seafhttp - [QSA,L]
#
# seahub
#
SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://127.0.0.1:8090/
ProxyPassReverse / http://127.0.0.1:8090/
----

=== Création de bases de données

. Loguez vous sur ISPConfig
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `seafile` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Aller dans le menu `Database` pour définir les bases de données
.. Appliquer l'opération ci après 3 fois d'affilée pour créer les trois bases suivantes: `ccnetdb`, `seafiledb`, `seahubdb`
... Cliquez sur `Add new Database` pour créer une nouvelle base de données
... Saisissez les informations:
**** `Site:` <- sélectionner le site `example.com`
**** `Database name:` <- Saisissez le nom de la base de données 
**** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxseafile`. x: est le numéro de client.
... Cliquez sur `save`
.. Les trois bases de données doivent apparaitre dans la liste des bases

=== Téléchargez et installez Seafile

Appliquez la procédure suivante:

. Loguez vous comme `root` sur le serveur
. Installez quelques paquets Debian complémentaires. Tapez:
+
[source,bash]
----
apt-get install python2.7 python-setuptools python-simplejson python-pil python-mysqldb python-flup
----
. Je préfère faire tourner mes serveurs dans le répertoire privé plutot que dans le répertoire web pour des questions de sécurité. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private
mkdir seafile
cd seafile
wget https://download.seadrive.org/seafile-server_7.0.5_x86-64.tar.gz
tar zxvf seafile-server_7.0.5_x86-64.tar.gz
mkdir installed
mv seafile-server_* installed
cd seafile-server-*
./setup-seafile-mysql.sh
cd ../..
chown -R web1:client0 seafile <1>
----
<1> choisissez le user et le groupe de votre site web. Ces informations sont consultables dans ISPConfig en consultant les informations du Web Domain->onlget `Options`->champs Linux User et Linux Group.
. A ce moment, vous devez répondre à un certain nombre de questions.
. Choisissez le mode de configuration 2) pour indiquer vous même les informations sur les bases de données créées.
. Vous devrez ensuite donner le nom d'utilisateur pour la base de données, le mot de passe ainsi que le nom des 3 bases de données.
. Si tout est saisi correctement le programme doit donner une synthèse de ce qui a été configuré

=== Lancement initial

Nous allons effectuer un premier lancement du serveur Seafile:

. allez dans le répertoire contenant les configurations et éditez `gunicorn.conf`. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private/seafile/conf
vi gunicorn.conf
----
. Repèrez le texte `bind=` et mettez un numéro de port 8090 à la place de 8000. Comme ceci:
+
[source,bash]
----
bind = "127.0.0.1:8090"
----
. Editez le fichier `seafile.conf`. Tapez:
+
[source,bash]
----
vi seafile.conf
----
. mettez un port 8092 au lieu du port 8080 saisi pour l'entrée `fileserver`. Le fichier doit contenir ceci:
+
[source,ini]
----
[fileserver]
port = 8092
----
. Editez le fichier `ccnet.conf`. Tapez:
+
[source,bash]
----
vi ccnet.conf
----
. modifier l'entrée SERVICE_URL. Le fichier doit contenir ceci:
+
[source,bash]
----
SERVICE_URL = https://seafile.example.com
----
. Editez le fichier `seahub_settings.py`. Tapez:
+
[source,bash]
----
vi seahub_settings.py
----
. modifier l'entrée FILE_SERVER_ROOT. Le fichier doit contenir ceci:
+
[source,python]
----
FILE_SERVER_ROOT = 'https://seafile.example.com/seafhttp'
----
. Démarrez Seafile. Tapez:
+
[source,bash]
----
sudo -u web1 ./seafile.sh start <1>
sudo -u web1 ./seahub.sh start 8090 <1>
----
<1> remplacer le nom de user web1 par celui correspondant à celui du site web installé (indiqué dans le champ `Options`->`linux user` du web domain). (Si vous n'avez qu'un site, web1 est le bon).
. Débloquez le port 8090 et 8092 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 8090 et 8092
.. Cliquez sur `save`
. Faites pointer votre navigateur sur https://seafile.example.com
. La page de login de Seafile doit s'afficher

=== Lancement automatique de Seafile

Afin de s'assurer que Seafile tourne en permanence, on doit créer un script de lancement automatique de Seafile:

. Créer un script de lancement automatique. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private/seafile
touch startseafile.sh
chmod +x startseafile.sh
vi startseafile.sh
----
. Coller le texte suivant de le fichier ouvert:
+
[source,bash]
----
#!/bin/bash
 
# Change the value of "seafile_dir" to your path of seafile installation
seafile_dir=/var/www/seafile.example.com/private/seafile <1>
script_path=${seafile_dir}/seafile-server-latest
seafile_init_log=${seafile_dir}/logs/seafile.init.log
seahub_init_log=${seafile_dir}/logs/seahub.init.log
 
case "$1" in
start)
${script_path}/seafile.sh start >> ${seafile_init_log} 
${script_path}/seahub.sh start 8090 >> ${seahub_init_log}
;;
restart)
${script_path}/seafile.sh restart >> ${seafile_init_log} 
${script_path}/seahub.sh restart 8090 >> ${seahub_init_log}
;;
stop)
${script_path}/seahub.sh stop >> ${seahub_init_log} 
${script_path}/seafile.sh stop >> ${seafile_init_log}
;;
*)
echo "Usage: /etc/init.d/seafile {start|stop|restart}"
exit 1
;;
esac
----
<1> remplacer example.com par votre nom de domaine
. Créer un job cron dans ISPConfig pour démarrer Seafile au démarrage
.. Allez dans la rubrique `Sites` puis dans le menu `Cron Jobs`. Cliquez sur `Add cron Job`. Saisisssez les champs:
*** `Parent Website:` <- mettre `example.com`
*** `Minutes:` <- mettre *
*** `Hours:` <- mettre *
*** `Days of month:` <- mettre *
*** `Months:` <- mettre `@reboot`
*** `Days of week:` <- mettre *
*** `Command to run:` <- mettre `/var/www/seafile.example.com/private/seafile/startseafile.sh start`
. Créer un second job cron dans ISPConfig pour redémarrer Seafile tous les jours
.. Allez dans la rubrique `Sites` puis dans le menu `Cron Jobs`. Cliquez sur `Add cron Job`. Saisisssez les champs:
*** `Parent Website:` <- mettre `example.com`
*** `Minutes:` <- mettre 45
*** `Hours:` <- mettre 20
*** `Days of month:` <- mettre *
*** `Months:` <- mettre *
*** `Days of week:` <- mettre *
*** `Command to run:` <- mettre `/var/www/seafile.example.com/private/seafile/startseafile.sh restart`
. Arretez le serveur précédemment lancé en tant que root. Tapez:
. Enjoy !

== Annexe

=== Installation de Hestia

Hestia est basé sur VestaCP. C'est une alternative opensource et plus moderne de cet outiL.
La documentation est proposée ici: https://docs.hestiacp.com/

Attention Hestia n'est pas compatible de Webmin dans le sens que webmin est incapable de lire et d'interpréter les fichiers créés par Hestia.

De même, Hestia est principalement compatible de PHP. Si vous utilisez des système web basés sur des applicatifs écrits en Python ou en Ruby, la configuration sera à faire à la main avec tous les problèmes de compatibilité que cela impose.

Pour installer:

. Se logger `root` sur le serveur
. Télécharger le package et lancez l’installeur
.. Tapez :
+
[source,bash]
----
wget https://raw.githubusercontent.com/hestiacp/hestiacp/release/install/hst-install.sh
----
.. Lancez l'installeur. Tapez :
+
[source,bash]
----
bash hst-install.sh -g yes -o yes
----
.. Si le système n'est pas compatible, HestiaCP vous le dira. Sinon,  il vous informe de la configuration qui sera installée. Tapez `Y` pour continuer.
.. Entrez votre adresse mail standard et indépendante du futur serveur qui sera installé. ce peut être une adresse gmail.com par exemple.
. Hestia est installé. Il est important de bien noter le mot de passe du compte admin de Hestia ainsi que le numéro de port du site web
