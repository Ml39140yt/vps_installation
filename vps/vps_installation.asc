// Made with love with Asciidoctor

= Installation d'un VPS
:source-highlighter: pygments
:pygments-linenums-mode: inline
:pygments-style: colorful
Stéphane Apiou <stephane@apiou.org>
v1.0, 2020-03-27
:icons: font
:numbered:
:allow-uri-read:


== Avant propos

Ce document est disponible sur le site https://vps-installation.readthedocs.io[ReadTheDocs]
// inhibé car ne fonctionne pas pour docbook
//image:https://readthedocs.org/projects/vps-installation/badge/[link="https://vps-installation.readthedocs.io"]
et sur https://github.com/apiou/vps_installation[Github].

Cette documentation décrit la méthode que j'ai utilisé pour installer un serveur VPS sur la plate-forme OVH.
Elle est le résultat de très nombreuses heures de travail pour collecter la documentation nécessaire.
Sur mon serveur, j'ai installé un Linux Debian 10. Cette documentation est facilement transposable pour des versions différentes de Debian ou à Ubuntu ou toute autre distribution basée sur l'un ou l'autre.
En revanche si vous utilisez CentOS, il y aura des différences beaucoup plus importantes notamment liées au gestionnaire de paquets `yum`, le nommage des paquets, les configurations par défaut et aux différences dans l'arborescence présente dans /etc.

Dans ce document, je montre la configuration de nombreux types de sites web et services dans un domaine en utilisant ISPConfig.

Sont installés:

* un panel https://www.ispconfig.org/[ISPConfig]
* un configurateur http://www.webmin.com/[Webmin]
* un serveur apache avec sa configuration let's encrypt et les plugins PHP, python et ruby
* un serveur de mail avec antispam, sécurisation d'envoi des mails et autoconfiguration pour Outlook, Thunderbird, Android.
* un webmail https://roundcube.net[roundcube],
* un serveur de mailing list https://www.list.org[mailman],
* un serveur ftp et sftp sécurisé.
* un serveur de base de données et son interface web d'administration https://www.phpmyadmin.net/[phpmyadmin].
* des outils de sécurisation, de mise à jour automatique et d'audit du serveur
* un outil de Monitoring http://munin-monitoring.org/[Munin]
* un outil de Monitoring http://mmonit.com/monit/[Monit]
* un sous domaine pointant sur un site auto-hébergé (l’installation du site n'est pas décrite ici; Se référer à https://yunohost.org[Yunohost]),
* un site CMS sous https://www.joomla.fr/[Joomla],
* un site CMS sous https://www.concrete5.org/[Concrete5],
* un site WIKI sous https://www.mediawiki.org[Mediawiki],
* un site https://wordpress.com[Wordpress],
* un site https://microweber.org/[Microweber],
* un site Photo sous https://piwigo.org/[Piwigo],
* un site Collaboratif sous https://nextcloud.com[Nextcloud],
* un site https://gitea.io[Gitea] et son repository GIT,
* un serveur et un site  de partage de fichiers https://www.seafile.com[Seafile],
* un serveur https://grafana.com/[Grafana], https://prometheus.io/[Prometheus], https://github.com/grafana/loki[Loki], Promtail pour gérer les statistiques et les logs du serveur,
* un serveur de sauvegardes https://www.duplicati.com[Duplicati]
* un serveur de VPN https://pritunl.com/[Pritunl],

Dans ce document nous configurons un nom de domaine principal. Pour la clarté du texte, il sera nommé "example.com". Il est à remplacer évidemment par votre nom de domaine principal.

Je suppose dans ce document que vous savez vous connecter à distance sur un serveur en mode terminal, que vous savez vous servir de `ssh` pour Linux ou de `putty` pour Windows, que vous avez des notions élémentaires de Shell Unix et que vous savez vous servir de l'éditeur `vi`. Si `vi` est trop compliqué pour vous, je vous suggère d'utiliser l'éditeur de commande `nano` à la place et de remplacer `vi` par `nano` dans toutes les lignes de commande.

Dans le document, on peut trouver des textes entourés de <texte>. Cela signifie que vous devez mettre ici votre propre texte selon vos préférences.

A propos des mots de passe: il est conseillé de saisir des mots de passe de 10 caractères contenant des majuscules/minuscules/nombres/caractères spéciaux. Une autre façon de faire est de saisir de longues phrases. Par exemple: 'J'aime manger de la mousse au chocolat parfumée à la menthe'. Ce dernier exemple a un taux de complexité est bien meilleur et les mots de passe classiques. Il est aussi plus facile à retenir que 'Az3~1ym_a&'.

Le coût pour mettre en oeuvre ce type de serveur est relativement faible:
* Compter 15-18€TTC/an pour un nom de domaine classique (mais il peut y avoir des promos)
* Compter 5€TTC/mois pour un VPS de base (2Go de Ram, un coeur, 20Go de SSD). Une machine plus sérieuse sera à 15€/mois (8Go de Ram, 2 coeurs, 80Go de SSD).

Le budget est donc de 6-7€TTC/mois pour une offre d'entrée de gamme. Il faut plus sérieusement compter sur 16€/mois tout compris.

== Choix du VPS

Cette partie du guide s'adresse aux utilisateurs d'OVH.
J'ai pour ma part choisi un serveur VPS SSD chez OVH avec 2Go de RAM. Au moment ou j'écris ce document il possède un seul coeur et 20 Go de disque.

Choisissez d'installer une image Linux seule avec Debian 10.
Une fois l'installation effectuée, vous recevez un Email sur l'adresse mail de votre compte OVH avec vos identifiants de login root. Ils serviront à vous connecter sur le serveur.

En vous loguant sur la https://www.ovh.com/manager/web[plateforme d'administration d'OVH], vous accèderez aux informations de votre serveur dans le menu Server->VPS. A cet endroit votre VPS doit y être indiqué.

En cliquant dessus un ensemble de menus doivent apparaitre pour administrer celui-ci. Vous y trouverez notamment:

* Son adresse <IP> et le nom de la machine chez OVH. Elle est du type "VPSxxxxxx.ovh.net".
* La possibilité de le redémarrer
* La possibilité de le reinstaller (avec perte complète de données)
* un KVM pour en prendre le controle console directement dans le navigateur
* un menu de configuration de reverse DNS (qui nous sera utile par la suite) pour définir le domaine par défaut
* le statut des services principaux (http, ftp, ssh ...)
* enfin des choix pour souscrire à un backup régulier, ajouter des disques ou effecter un snapshot de la VM associée au VPS.

include::../common/registrar_selection.asc[]

include::../common/root_login.asc[]

== Configuration basique

:leveloffset: 1
include::../common/editor_choice.asc[]

include::../common/etc_keeper.asc[]

include::../common/packet_config_vps.asc[]

include::../common/basic_packets.asc[]

include::../common/debfoster_vps.asc[]

include::../common/keeper_file.asc[]

include::../common/autoupdate.asc[]

include::../common/hostname_check.asc[]

include::../common/ipv6.asc[]

include::../common/ban_root_ssh.asc[]

include::../common/ssh_remotekey.asc[]

include::../common/nopass_sudo.asc[]

include::../common/install_dselect.asc[]

include::../common/create_swap.asc[]

:leveloffset: 0
include::../common/initial_install.asc[]

:leveloffset: 1
include::../common/postfix_conf.asc[]

include::../common/mariadb_conf.asc[]

include::../common/apache_conf.asc[]

include::../common/mailman_conf.asc[]

include::../common/awstats_conf.asc[]

include::../common/fail2ban_conf.asc[]

include::../common/pureftp_conf.asc[]

include::../common/phpmyadmin_conf.asc[]

include::../common/roundcube_conf.asc[]

include::../common/letsencrypt_conf.asc[]

include::../common/vulnerabilty_scanner.asc[]

:leveloffset: 0
include::../common/panel_intro_install.asc[]

:leveloffset: 1
include::../common/ispconfig_install.asc[]

include::../common/webmin_install.asc[]

:leveloffset: 0
[#domain-config]
== Configuration d'un domaine

Cette configuration est réalisée avec le Panel ISPConfig installé dans le chapitre précédent.
L'étape "login initial" n'est à appliquer qu'une seule fois. Une fois votre premier domaine configuré, vous pourrez vous loguer à ISPconfig en utilisant ce domaine à l'adresse: https://example.com:8080/ .

:leveloffset: 1
include::../common/domain_firstlogin.asc[]

include::../common/domain_dns.asc[]

include::../common/domain_dnssec.asc[]

include::../common/domain_example.asc[]

include::../common/domain_sub.asc[]

include::../common/domain_website.asc[]

include::../common/domain_vhost.asc[]

:leveloffset: 0
include::../common/certificates_tools.asc[]

include::../common/munin_monit.asc[]

== Configuration de la messagerie

:leveloffset: 1
include::../common/rspamd_conf.asc[]

include::../common/mail_server_conf.asc[]

include::../common/mail_server_sec.asc[]

include::../common/mail_autoconfig.asc[]

include::../common/mail_autodiscovery.asc[]

include::../common/mail_mailbox.asc[]

include::../common/mail_mailer_conf.asc[]

include::../common/mail_roundcube.asc[]

include::../common/mail_imap_transfer.asc[]

== Installation de Joomla ou de Concrete5

Joomla est un CMS très connu écrit en PHP. Il est fréquemment mis à jour et inclut une foule de plugins
Concrete5 est un autre CMS assez connu  avec un design plus moderne.

L'installation s'effectue à 100% avec ISPConfig.
Dans la procédure ci dessous qui est taillée pour Joomla, vous pouvez l'appliquer à l'identique pour concrete5 en remplacant les textes joomla par concrete5.

=== Création du site web de Joomla

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `joomla`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `joomla`.
.. Le faire pointer vers le web folder `joomla`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.

=== Création de l'application Joomla

Appliquez les opérations suivantes dans ISPConfig:

. Allez dans la rubrique `Sites`, le menu `Update Packagelist`.
. Cliquez sur `Update Packagelist`
. Allez dans la rubrique `Sites`, le menu `Available packages`.
. Faites une recherche par `Name`. Tapez `joomla`
. Cliquez sur le package `joomla`
. Cliquez sur `Install this package`
. Remplissez tous les champs:
** `Install location:` <- choisissez votre domain (`example.com`) et laissez vide le chemin.
** `New database password` <- gardez ce qui est remplit
** `Administrator's login` <- gardez ce qui est remplit: `admin`
** `Password` et `Repeat Password` <- Tapez votre mot de passe
** `Default site language:` <- choisissez `French`
** `I accept the license` <- cochez la case
. Cliquez sur `Install`
. Pointez votre navigateur sur https://example.com/ et loguez vous `admin` avec votre mot de passe saisi, c'est fait !
. N'oubliez pas d'administrer le site et de le mettre à jour avec la dernière version de Joomla.

== Installation de Mediawiki

Mediawiki est le portail wiki mondialement connu et utilisé notamment pour le site wikipedia.

L'installation s'effectue à 100% avec ISPConfig.

=== Création du site web de Mediawiki

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `mediawiki`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `mediawiki`.
.. Le faire pointer vers le web folder `mediawiki`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.

=== Création de l'application Mediawiki

Appliquez les opérations suivantes dans ISPConfig:

. Allez dans la rubrique `Sites`, le menu `Update Packagelist`.
. Cliquez sur `Update Packagelist`
. Allez dans la rubrique `Sites`, le menu `Available packages`.
. Faites une recherche par `Name`. Tapez `mediawiki`
. Cliquez sur le package `mediawiki`
. Cliquez sur `Install this package`
. Remplissez tous les champs:
** `Install location:` <- choisissez votre domain (`example.com`) et laissez vide le chemin.
** `New database password` <- gardez ce qui est remplit
** `Administrator's login` <- gardez ce qui est remplit: `admin`
** `Password` et `Repeat Password` <- Tapez votre mot de passe
** `Default site language:` <- choisissez `French`
** `I accept the license` <- cochez la case
. Cliquez sur `Install`
. Pointez votre navigateur sur https://example.com/ et loguez vous `admin` avec votre mot de passe saisi, c'est fait !
. N'oubliez pas d'administrer le site et de le mettre à jour avec la dernière version de Mediawiki.

== Installation de Wordpress

Wordpress est un CMS très connu écrit en PHP. Il est fréquemment mis à jour.

L'installation s'effectue à 100% avec ISPConfig.

=== Création du site web de Wordpress

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `wordpress`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `wordpress`.
.. Le faire pointer vers le web folder `wordpress`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.

=== Création de l'application Wordpress

Appliquez les opérations suivantes dans ISPConfig:

. Allez dans la rubrique `Sites`, le menu `Update Packagelist`.
. Cliquez sur `Update Packagelist`
. Allez dans la rubrique `Sites`, le menu `Available packages`.
. Faites une recherche par `Name`. Tapez `wordpress`
. Cliquez sur le package `wordpress`
. Cliquez sur `Install this package`
. Remplissez tous les champs:
** `Install location:` <- choisissez votre domain (`example.com`) et laissez vide le chemin.
** `New database password` <- gardez ce qui est remplit
** `Administrator's login` <- gardez ce qui est remplit: `admin`
** `Password` et `Repeat Password` <- Tapez votre mot de passe
** `Default site language:` <- choisissez `French`
** `I accept the license` <- cochez la case
. Cliquez sur `Install`
. Pointez votre navigateur sur https://example.com/ et loguez vous `admin` avec votre mot de passe saisi, c'est fait !
. N'oubliez pas d'administrer le site et de le mettre à jour avec la dernière version de Wordpress.

== Micro Weber

Microweber est un système de gestion de contenu et un constructeur de sites web Open Source. Il est basé sur le langage de programmation PHP et le framework web Laravel 5, utilisant le glisser-déposer et permettant aux utilisateurs de créer rapidement du contenu, tout en programmant et en gérant plusieurs affichages. Il dispose d'une fonction d'édition en direct qui permet aux utilisateurs de visualiser leurs modifications telles qu'elles apparaîtraient. 

=== Création du site web de Microweber

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `microweber`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `microweber`.
.. Le faire pointer vers le web folder `microweber`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.
.. Cliquez sur `Save`
. <<#root_login, Loguez vous comme root sur le serveur>>

=== Création des bases de données

Appliquez les opérations suivantes dans ISPConfig :

. Créez une base de données mysql. Aller dans le menu `Database` pour définir un utilisateur MariaDB
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `microweber` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Cliquez sur `save`
.. Cliquez sur `Add new Database` pour créer une nouvelle base de données
.. Saisissez les informations:
*** `Site:` <- sélectionner le site `example.com`
*** `Database name:` <- Saisissez le nom de la base de données `microweber`
*** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxmicroweber`. x: est le numéro de client.
.. Cliquez sur `save`

=== Installation de Microweber

Suivez la procédure suivante:

. Tapez la commande suivante:
[source,command]
----
https://raw.githubusercontent.com/microweber-dev/webinstall/master/webinstall.php
----
. Un fois téléchargé, faites pointer votre navigateur vers http://microweber.example.com/netinstall.php
. Indique `.` comme répertoire d'installation et cliquez sur `Télécharger et décompresser Piwigo`
. Une fois le téléchargement terminé cliquez sur `Installer Microweber`. Rechargez la page si besoin.
. Répondez aux questions suivantes:
** `Hote` <- Laissez `localhost`
** `Utilisateur` <- entrez `cxmicroweber`. x est le numero de client; habituellement c'est 0
** `Mot de passe` <- Tapez votre mot de passe
** `Nom de la Base de données` <- entrez `cxmicroweber`. x est le numero de client; habituellement c'est 0
** `Préfix des noms de tables` <- Laissez le champ vide
** `Nom d'Utilisateur` <- tapez `admin`
** `Mot de passe` <- Tapez votre mot de passe
** `Mot de passe [confirmer]` <- Tapez votre mot de passe
** `Adresse e-mail` <- Tapez votre adresse mail d'administrateur
. Tapez `Démarrer l'installation`
. Vous êtes redirigé sur le site Microweber ou vous pourrez vous loguer et commencer à utiliser l'outil

== Piwigo

Piwigo est une application web pour gérer votre collection de photos, et autres médias. Doté de puissantes fonctionnalités, il gère des galeries partout dans le monde. Elle est écrite en PHP et nécessite une base de données MySQL.

Piwigo était auparavant connu sous le nom PhpWebGallery.

=== Création du site web de Piwigo

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `piwigo`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `piwigo`.
.. Le faire pointer vers le web folder `piwigo`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.
.. Cliquez sur `Save`
. <<#root_login, Loguez vous comme root sur le serveur>>

=== Création des bases de données

Appliquez les opérations suivantes dans ISPConfig :

. Créez une base de données mysql. Aller dans le menu `Database` pour définir un utilisateur MariaDB
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `piwigo` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Cliquez sur `save`
.. Cliquez sur `Add new Database` pour créer une nouvelle base de données
.. Saisissez les informations:
*** `Site:` <- sélectionner le site `example.com`
*** `Database name:` <- Saisissez le nom de la base de données `piwigo`
*** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxpiwigo`. x: est le numéro de client.
.. Cliquez sur `save`

=== Installation de Piwigo

Suivez la procédure suivante:

. Tapez la commande suivante:
[source,command]
----
cd /var/www/piwigo.example.com/piwigo
wget http://piwigo.org/download/dlcounter.php?code=netinstall -O piwigo-netinstall.php
----
. Un fois téléchargé, faites pointer votre navigateur vers http://piwigo.example.com/piwigo-netinstall.php
. Indique `.` comme répertoire d'installation et cliquez sur `Téléharger et décompresser Piwigo`
. Une fois le téléchargement terminé cliquez sur `Installer Piwigo`. Rechargez la page si besoin.
. Répondez aux questions suivantes:
** `Hote` <- Laissez `localhost`
** `Utilisateur` <- entrez `cxpiwigo`. x est le numero de client; habituellement c'est 0
** `Mot de passe` <- Tapez votre mot de passe
** `Nom de la Base de données` <- entrez `cxpiwigo`. x est le numero de client; habituellement c'est 0
** `Préfix des noms de tables` <- Laissez le champ vide
** `Nom d'Utilisateur` <- tapez `admin`
** `Mot de passe` <- Tapez votre mot de passe
** `Mot de passe [confirmer]` <- Tapez votre mot de passe
** `Adresse e-mail` <- Tapez votre adresse mail d'administrateur
. Tapez `Démarrer l'installation`
. Vous êtes redirigé sur le site piwigo ou vous pourrez vous loguer et commencer à utiliser l'outil

== Installation de Nextcloud

NextCloud est un serveur d'hébergement et de partage de fichiers gratuit et open source, fork du projet ownCloud.
Il est très similaire aux autres systèmes de partage de fichiers des services comme Google Drive, Dropbox et iCloud ou Seafile.
NextCloud vous permet de stocker des fichiers, des documents, des photos, des films et des vidéos à partir de la centrale l'emplacement.
Avec NextCloud, vous pouvez partager des fichiers, des contacts et tout autre les médias avec vos amis et vos clients.
NextCloud s'intègre avec le courrier, calendrier, contacts et autres fonctionnalités qui aideront vos équipes à obtenir leur travail est plus rapide et plus facile.
Vous pouvez installer le client NextCloud sur un  ou plusieurs PC pour synchroniser les fichiers avec votre serveur Nextcloud.
Des clients sont disponibles pour la plupart des systèmes d'exploitation, y compris Windows, macOS, FreeBSD, et Linux.

=== Installation initiale

NextCloud est écrit en PHP et utilise une base de données MariaDB pour stocker ses données.

Pour installer, Suivez la procédure suivante:

. Installez quelques paquets de base. Tapez:
+
[source,bash]
----
apt-get install  php-cgi php-curl
----
. Une fois installé, éditez le fichier php.ini pour changer quelques limitations. Tapez:
[source,bash]
----
vi /etc/php/7.3/apache2/php.ini
----
. Cherchez les champs ci dessous et changez les valeurs comme suit:
+
[source,ini]
----
memory_limit = 512M
upload_max_filesize = 500M
post_max_size = 500M
max_execution_time = 300
date.timezone = Asia/Kolkata
----
. Sauvez et redémarrez apache. Tapez:
+
[source,command]
----
systemctl restart apache2
----

=== Création du site web de Nextcloud

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `nextcloud`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `nextcloud`.
.. Le faire pointer vers le web folder `nextcloud`.
.. Activer let’s encrypt ssl
.. Activer `PHP-FPM` pour PHP
.. Laisser le reste par défaut.
.. Cliquez sur `Save`
. <<#root_login, Loguez vous comme root sur le serveur>>

=== Création des bases de données

Appliquez les opérations suivantes dans ISPConfig :

. Créez une base de données mysql. Aller dans le menu `Database` pour définir un utilisateur MariaDB
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `nextcloud` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Cliquez sur `save`
.. Cliquez sur `Add new Database` pour créer une nouvelle base de données
.. Saisissez les informations:
*** `Site:` <- sélectionner le site `example.com`
*** `Database name:` <- Saisissez le nom de la base de données `nextcloud`
*** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxnextcloud`. x: est le numéro de client.
.. Cliquez sur `save`

=== Installation de Nextcloud

Suivez la procédure suivante:

. Tapez la commande suivante:
[source,command]
----
cd /var/www/nextcloud.example.com/nextcloud
wget https://download.nextcloud.com/server/installer/setup-nextcloud.php
----
. Un fois téléchargé, faites pointer votre navigateur vers http://nextcloud.example.com/setup-nextcloud.php
. Indique `.` comme répertoire d'installation et cliquez sur `Next`
. Une fois le téléchargement terminé cliquez sur `Next`. Rechargez la page si besoin.
. Répondez aux questions suivantes:
** `Login Admin` <- tapez `admin`
** `Password Admin` <- Tapez votre mot de passe
** ouvrez `Stockage et base de données`
** `Configurer la base de données` <- cliquez sur `MariaDB`
** `Utilisateur de la Base de données` <- entrez `cxnextcloud`. x est le numero de client; habituellement c'est 0
** `Password de la Base de données` <- Tapez votre mot de passe
** `Nom de la Base de données` <- entrez `cxnextcloud`. x est le numero de client; habituellement c'est 0
** `nom du serveur` <- Laissez `Localhost`
. Tapez `Next`
. Vous êtes redirigé sur le site nextcloud ou vous pourrez vous loguer et commencer à utliser l'outil

== Installation et configuration de Gitea

Gitea est un système simple d'hébergement de code basé sur Git. C'est un fork de Gogs.
Il montre des fonctionnalités similaires à gitlab ou github tout en gardant un code plus simple.

=== Création du site web de Gitea

Appliquez les opérations suivantes Dans ISPConfig:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `gitea`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `gitea`.
.. Le faire pointer vers le web folder `gitea`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
ProxyPass "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# gitea httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://localhost:3000/ <1>
ProxyPassReverse / http://localhost:3000/ <1>
----
<1> mettez le nom de votre domaine à la place de example.com
.. Cliquez sur `Save`
. <<#root_login, Loguez vous comme root sur le serveur>>
. Créez un utilisateur `Gitea`. Tapez:
+
[source,bash]
----
adduser --system --disabled-password --group --shell /bin/bash --home /home/gitea gitea
----
. Créez la structure de répertoire de `Gitea`. Tapez:
+
[source,bash]
----
mkdir -p /var/lib/gitea/{data,log} /etc/gitea /run/gitea
----
. Donnez les bonnes permissions aux répertoires. Tapez:
+
[source,bash]
----
chown -R gitea:gitea /var/lib/gitea
chown -R gitea:gitea /run/gitea
chown -R root:gitea /etc/gitea
chmod -R 750 /var/lib/gitea
chmod 770 /etc/gitea
----

=== Création des bases de données

Appliquez les opérations suivantes dans ISPConfig :

. Créez une base de données mysql. Aller dans le menu `Database` pour définir un utilisateur MariaDB
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `gitea` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Cliquez sur `save`
.. Cliquez sur `Add new Database` pour créer une nouvelle base de données
.. Saisissez les informations:
*** `Site:` <- sélectionner le site `example.com`
*** `Database name:` <- Saisissez le nom de la base de données `gitea`
*** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxgitea`. x: est le numéro de client.
.. Cliquez sur `save`

=== Téléchargez et installez Gitea

Appliquez les opérations suivantes:

. Téléchargez gitea du https://dl.gitea.io/gitea/[site de chargement]. Tapez pour un système 64 bits:
+
[source,bash]
----
wget https://dl.gitea.io/gitea/master/gitea-master-linux-amd64 -O /usr/local/bin/gitea
chmod 755 /usr/local/bin/gitea
----
. Créez maintenant une entrée pour le launcher systemd. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/gitea.service
----
. y Coller le texte suivant:
+
[source,ini]
----
[Unit]
Description=Gitea (Git with a cup of tea)
After=syslog.target
After=network.target
Requires=mysqld.service
[Service]
Type=simple
User=gitea
Group=gitea
WorkingDirectory=/var/lib/gitea/
RuntimeDirectory=gitea
ExecStart=/usr/local/bin/gitea web -c /etc/gitea/app.ini
Restart=always
Environment=USER=gitea HOME=/home/gitea GITEA_WORK_DIR=/var/lib/gitea
[Install]
WantedBy=multi-user.target
----
. Recharge la base de systemd. Tapez:
+
[source,bash]
----
systemctl daemon-reload
----
. Activez et démarrez `Gitea`. Tapez:
+
[source,bash]
----
systemctl enable gitea.service
systemctl start gitea.service
----
. Ouvrez votre navigateur sur l'url: https://gitea.example.com/install et remplissez les paramètres comme ci-après :
** `Type de base de données:` <- Sélectionnez `MySQL`
** `Nom d'utilisateur:` <- Tapez `c0gitea`
** `Mot de passe:` <-  Tapez le mot de passe saisi lors de la création de la base
** `Nom de base de données:` <- Tapez `c0gitea`
** `Titre du site:` <- mettez une titre de votre choix
** `Emplacement racine des dépôts:` <- saisissez `/home/gitea/gitea-repositories`
** `Répertoire racine Git LFS:` <- Tapez `/var/lib/gitea/data/lfs`
** `Exécuter avec le compte d'un autre utilisateur :` <- Tapez `gitea`
** `Domaine du serveur SSH:` <- Tapez votre domaine. exemple : `gitea.example.com`
** `Port du serveur SSH:` <- Tapez 22
** `Port d'écoute HTTP de Gitea:` <- Tapez 3000
** `URL de base de Gitea:` <- Tapez l'URL de votre domaine. Exemple: `https://gitea.example.com`
** `Chemin des fichiers log:` <- Tapez  `/var/lib/gitea/log`
** `Hôte SMTP:` <- Tapez `localhost`
** `Envoyer les e-mails en tant que:` <- Tapez `gitea@gitea.example.com`
** `Exiger la confirmation de l'e-mail lors de l'inscription:` <- cochez la case
** `Activez les notifications par e-mail:` <- cochez la case
** `Désactiver le formulaire d'inscription:` <- cochez la case
** `Masquer les adresses e-mail par défaut:` <- cochez la case
. Laissez le reste et cliquez sur `Install Gitea`.
. Restreignez les permissions sur le fichier de configuration de gitea. Tapez:
+
[source,bash]
----
chmod 750 /etc/gitea
chown root:gitea /etc/gitea/app.ini
chmod 640 /etc/gitea/app.ini
----

. Redémarrez `gitea`.
. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
systemctl restart gitea.service
----

=== Activer une connexion SSH dédiée

En option, vous pouvez avoir envie de dédier une connexion SSH pour Gitea:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Éditez le fichier de configuration. Tapez:
+
[source,bash]
----
vi /etc/gitea/app.ini
----
. Trouvez les lignes suivantes et les remplacer dans le fichier. Chercher et remplacez:
+
[source,bash]
----
START_SSH_SERVER = true
SSH_PORT = 2222 <1>
----
<1> mettez ici le numéro de port que vous souhaitez
. Débloquez le port 2222 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 222
.. Cliquez sur `save`
. Redémarrez `gitea`. Tapez:
+
[source,bash]
----
systemctl restart gitea.service
----
. Enjoy !

== Installation de Seafile

Seafile est un système de partage de fichier simple et efficace écrit en Python. Il existe des clients de connexion pour Windows, Linux, Android, IOS.

Cette installation est optionnelle.

=== Création du site web de Seafile

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `seafile`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `seafile`.
.. Le faire pointer vers le web folder `seafile`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
Alias /media {DOCROOT}/private/seafile/seafile-server-latest/seahub/media
RewriteEngine On

<Location /media>
Require all granted
</Location>

Alias /.well-known {DOCROOT}/private/seafile/.well-known
RewriteEngine On

<Location /.well-known>
Require all granted
</Location>

ProxyPass "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# seafile httpserver
#
ProxyPass /seafhttp http://localhost:8092
ProxyPassReverse /seafhttp http://localhost:8092
RewriteRule ^/seafhttp - [QSA,L]
#
# seahub
#
SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://localhost:8090/
ProxyPassReverse / http://localhost:8090/
----

=== Création de bases de données

. Loguez vous sur ISPConfig
. Aller dans la rubrique `Sites`
.. Aller dans le menu `Database users` pour définir un utilisateur MariaDB
... Cliquez sur `Add new User` pour créer un nouvel utilisateur
... Saisissez les informations:
**** `Database user:` <-  saisir votre nom d'utilisateur `seafile` par exemple
**** `Database password:` <- saisir un mot de passe ou en générer un en cliquant sur le bouton
**** `Repeat Password:` <- saisir de nouveau le mot de passe
.. Aller dans le menu `Database` pour définir les bases de données
.. Appliquer l'opération ci après 3 fois d'affilée pour créer les trois bases suivantes: `ccnetdb`, `seafiledb`, `seahubdb`
... Cliquez sur `Add new Database` pour créer une nouvelle base de données
... Saisissez les informations:
**** `Site:` <- sélectionner le site `example.com`
**** `Database name:` <- Saisissez le nom de la base de données 
**** `Database user:` <- Saisir ici le nom d'utilisateur créé: `cxseafile`. x: est le numéro de client.
... Cliquez sur `save`
.. Les trois bases de données doivent apparaître dans la liste des bases

=== Téléchargez et installez Seafile

Appliquez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Installez quelques paquets Debian complémentaires. Tapez:
+
[source,bash]
----
apt-get install python2.7 python-setuptools python-simplejson python-pil python-mysqldb python-flup
----
. Je préfère faire tourner mes serveurs dans le répertoire privé plutôt que dans le répertoire web pour des questions de sécurité. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private
mkdir seafile
cd seafile
wget https://download.seadrive.org/seafile-server_7.0.5_x86-64.tar.gz
tar zxvf seafile-server_7.0.5_x86-64.tar.gz
mkdir installed
mv seafile-server_* installed
cd seafile-server-*
./setup-seafile-mysql.sh
cd ../..
chown -R web1:client0 seafile <1>
----
<1> choisissez le user et le groupe de votre site web. Ces informations sont consultables dans ISPConfig en consultant les informations du Web Domain->onglet `Options`->champs Linux User et Linux Group.
. A ce moment, vous devez répondre à un certain nombre de questions.
. Choisissez le mode de configuration 2) pour indiquer vous même les informations sur les bases de données créées.
. Vous devrez ensuite donner le nom d'utilisateur pour la base de données, le mot de passe ainsi que le nom des 3 bases de données.
. Si tout est saisi correctement le programme doit donner une synthèse de ce qui a été configuré

=== Lancement initial

Nous allons effectuer un premier lancement du serveur Seafile:

. allez dans le répertoire contenant les configurations et éditez `gunicorn.conf`. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private/seafile/conf
vi gunicorn.conf
----
. Repèrez le texte `bind=` et mettez un numéro de port 8090 à la place de 8000. Comme ceci:
+
[source,bash]
----
bind = "127.0.0.1:8090"
----
. Editez le fichier `seafile.conf`. Tapez:
+
[source,bash]
----
vi seafile.conf
----
. mettez un port 8092 au lieu du port 8080 saisi pour l'entrée `fileserver`. Le fichier doit contenir ceci:
+
[source,ini]
----
[fileserver]
port = 8092
----
. Editez le fichier `ccnet.conf`. Tapez:
+
[source,bash]
----
vi ccnet.conf
----
. modifier l'entrée SERVICE_URL. Le fichier doit contenir ceci:
+
[source,bash]
----
SERVICE_URL = https://seafile.example.com
----
. Editez le fichier `seahub_settings.py`. Tapez:
+
[source,bash]
----
vi seahub_settings.py
----
. modifier l'entrée FILE_SERVER_ROOT. Le fichier doit contenir ceci:
+
[source,python]
----
FILE_SERVER_ROOT = 'https://seafile.example.com/seafhttp'
----
. Démarrez Seafile. Tapez:
+
[source,bash]
----
sudo -u web1 ./seafile.sh start <1>
sudo -u web1 ./seahub.sh start 8090 <1>
----
<1> remplacer le nom de user web1 par celui correspondant à celui du site web installé (indiqué dans le champ `Options`->`linux user` du web domain). (Si vous n'avez qu'un site, web1 est le bon).
. Débloquez le port 8090 et 8092 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 8090 et 8092
.. Cliquez sur `save`
. Faites pointer votre navigateur sur https://seafile.example.com
. La page de login de Seafile doit s'afficher

=== Lancement automatique de Seafile

Afin de s'assurer que Seafile tourne en permanence, on doit créer un script de lancement automatique de Seafile:

. Créer un script de lancement automatique. Tapez:
+
[source,bash]
----
cd /var/www/seafile.example.com/private/seafile
touch startseafile.sh
chmod +x startseafile.sh
vi startseafile.sh
----
. Coller le texte suivant de le fichier ouvert:
+
[source,bash]
----
#!/bin/bash
 
# Change the value of "seafile_dir" to your path of seafile installation
seafile_dir=/var/www/seafile.example.com/private/seafile <1>
script_path=${seafile_dir}/seafile-server-latest
seafile_init_log=${seafile_dir}/logs/seafile.init.log
seahub_init_log=${seafile_dir}/logs/seahub.init.log
 
case "$1" in
start)
${script_path}/seafile.sh start >> ${seafile_init_log} 
${script_path}/seahub.sh start 8090 >> ${seahub_init_log}
;;
restart)
${script_path}/seafile.sh restart >> ${seafile_init_log} 
${script_path}/seahub.sh restart 8090 >> ${seahub_init_log}
;;
stop)
${script_path}/seahub.sh stop >> ${seahub_init_log} 
${script_path}/seafile.sh stop >> ${seafile_init_log}
;;
*)
echo "Usage: /etc/init.d/seafile {start|stop|restart}"
exit 1
;;
esac
----
<1> remplacer example.com par votre nom de domaine
. Créer un job cron dans ISPConfig pour démarrer Seafile au démarrage
.. Allez dans la rubrique `Sites` puis dans le menu `Cron Jobs`. Cliquez sur `Add cron Job`. Saisisssez les champs:
*** `Parent Website:` <- mettre `example.com`
*** `Minutes:` <- mettre *
*** `Hours:` <- mettre *
*** `Days of month:` <- mettre *
*** `Months:` <- mettre `@reboot`
*** `Days of week:` <- mettre *
*** `Command to run:` <- mettre `/var/www/seafile.example.com/private/seafile/startseafile.sh start`
. Créer un second job cron dans ISPConfig pour redémarrer Seafile tous les jours
.. Allez dans la rubrique `Sites` puis dans le menu `Cron Jobs`. Cliquez sur `Add cron Job`. Saisissez les champs:
*** `Parent Website:` <- mettre `example.com`
*** `Minutes:` <- mettre 45
*** `Hours:` <- mettre 20
*** `Days of month:` <- mettre *
*** `Months:` <- mettre *
*** `Days of week:` <- mettre *
*** `Command to run:` <- mettre `/var/www/seafile.example.com/private/seafile/startseafile.sh restart`
. Arretez le serveur précédemment lancé en tant que root. Tapez:
. Enjoy !

== Installation d'un serveur de VPN Pritunl

Pritunl est un serveur VPN basé sur OpenVPN.

=== Création du site web de Pritunl

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `pritunl`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `pritunl`.
.. Le faire pointer vers le web folder `pritunl`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
ProxyPass "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# Pritunl httpserver
#
  SSLProxyEngine On
  SSLProxyCheckPeerCN Off
  SSLProxyCheckPeerName Off
  SSLProxyVerify none

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / https://localhost:8070/
ProxyPassReverse / https://localhost:8070/
ProxyPreserveHost On
----

=== Installation de Pritunl

Veuillez suivre la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Ajoutez des repositories Debian. Tapez:
+
[source,bash]
----
tee /etc/apt/sources.list.d/mongodb-org.list << EOF
deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main
EOF
tee /etc/apt/sources.list.d/pritunl.list << EOF
deb http://repo.pritunl.com/stable/apt buster main
EOF
apt-get install dirmngr
apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv E162F504A20CDF15827F718D4B7C549A058F8B6B
apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292A
apt-get update
apt-get --assume-yes install pritunl mongodb-org
----
. Pritunl utilise en standard le port 80 et 443. Ces deux ports sont utilisés dans notre configuration par le serveur apache
. On commence par arrêter apache. Tapez:

+
[WARNING]
Plus aucun site web ne sera servit. Danger donc.
+
[source,bash]
----
systemctl stop apache2
----
. Démarrez Mongodb ainsi que Pritunl. Tapez:
+
[source,bash]
----
systemctl start mongod pritunl
systemctl enable mongod pritunl
----

=== Configuration de Pritunl

Votre service Pritunl est actif. Vous devez maintenant le configurer pour qu'il fonctionne:

. pointez votre navigateur sur le site web de Pritunl: https://example.com
. Accepter le certificat non sécurisé. La page de setup de Pritunl s'affiche.
. Obtenez la clé d'activation. Tapez: 
+
[source,bash]
----
pritunl setup-key
----
. copier la clé dans la page web. Cliquez sur `Save`
. La page web s'affiche en erreur. Pas d'inquiétude à avoir.
. Arrêtez le serveur Pritunl. Tapez:
+
[source,bash]
----
systemctl stop pritunl
----
. Configurez le serveur pour qu'il n'utilise plus le port 80 et le port 443
+
[source,bash]
----
pritunl set app.server_port 8070
pritunl set app.redirect_server false
----
. Redémarrez apache et pritunl
+
[source,bash]
----
systemctl start apache2
systemctl start pritunl
----
. Pointez maintenant votre navigateur sur le site https://pritunl.example.com . La page de login de pritunl doit s'afficher. Si ce n'est pas le cas, revérifier votre configuration de site web dans ISPConfig et que le port 8070 est bien activé.
. Sur le serveur, tapez:
+
[source,bash]
----
pritunl default-password
----
. Entrez dans la page web la valeur de `username` et de `password` affichés dans le terminal.
. Une boite de dialogue `initial setup` s'affiche. Ne changez rien mais tapez votre mot de passe.
. Vous êtes maintenant connecté sur le site web.
. Cliquez sur l'onglet `Users`
.. Cliquez sur `Add Organization`
.. Entrez votre nom d'organisation. Par exemple `Personnel`
.. Cliquez sur `Add`
.. Cliquez sur `Add User`
.. Remplissez les champs:
*** `Name: ` <- Tapez votre nom de login (pas de caractère accentué pas d'espace)
*** `Select an organization: ` <- sélectionnez votre organisation
*** `Email: ` <- Tapez votre adresse Email
*** `Pin:` <- entrez votre code Pin (que des nombres; au moins 6 chiffres)
.. Cliquez sur `Add`
. Allez sur l'onglet `Servers`
.. Cliquez sur `Add Server`
.. Remplissez les champs:
*** `Name:` <- donnez un nom à votre serveur (pas de caractère accentué pas d'espace)
*** laissez le reste tel quel mais notez bien le numéro de port UDP indiqué
.. Cliquez sur `Add`
.. Cliquez sur `Attach Organization`
.. Sélectionnez le `server` et l' `organization`.
.. Cliquez sur `Attach`
. Débloquez le port VPN dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open UDP ports:`, ajoutez le port UDP du VPN que vous avez noté.
.. Cliquez sur `save`
. Retourner dans l'interface de Pritunl. retournez sur l'onglet `Servers`
.. Cliquez sur `Start server`
. Votre serveur de VPN est opérationnel.

=== Se connecter au serveur de VPN

Comme Pritunl est compatible OpenVPN n'importe quel logiciel compatible OpenVPN peut être utilisé.
Pritunl founit un https://client.pritunl.com/[client] compatible pour Linux, macOS, and Windows.

Pour se connecter à l'aide du client, vous devez charger un fichier de configuration qui est téléchargeable dans l'onglet utilisateur du serveur web.
Ce fichier est à importer dans le logiciel client de Pritunl.
Une fois fait, une compte apparaît dans le logiciel client. Vous pourrez vous connecter en cliquant sur le bouton `Connect` du compte utilisateur.

=== Réparer une base Pritunl

Si jamais votre base est corrompue, vous pourrez la réparer en tapant:

[source,bash]
----
systemctl stop pritunl
pritunl repair-database
systemctl start pritunl
----

=== Mot de passe perdu

Vous pouvez re-générer un mot de passe en tapant:

[source,bash]
----
pritunl reset-password
----

== Installation de Grafana

Grafana est un logiciel de visualisation et d'analyse à code source ouvert. Il vous permet d'interroger, de visualiser, d'alerter et d'explorer vos mesures, quel que soit l'endroit où elles sont stockées. En clair, il vous fournit des outils pour transformer vos données de base de données de séries chronologiques (TSDB) en de magnifiques graphiques et visualisations.
Grafana s'appuie sur Prometheus afin d'obtenir des métriques.
Loki est aussi installé pour réaliser une analyse précise des fichiers de logs.

Cette installation est optionnelle puisque Munin est déjà installé sur votre système.

=== Création du site web de Grafana

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `grafana`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `grafana`.
.. Le faire pointer vers le web folder `grafana`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
ProxyPass "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
ProxyPassReverse "/.well-known/acme-challenge" http://localhost:80/.well-known/acme-challenge
RewriteRule ^/.well-known/acme-challenge - [QSA,L]

# grafana httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPass / http://localhost:3000/
ProxyPassReverse / http://localhost:3000/
----

=== Installation de Grafana

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
echo "deb https://packages.grafana.com/oss/deb stable main" >>/etc/apt/sources.list.d/grafana.list
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
----
. Installez les paquets. Tapez:
+
[source,bash]
----
apt update
apt install grafana prometheus prometheus-mysqld-exporter prometheus-apache-exporter prometheus-bind-exporter prometheus-process-exporter
----
. Editez la configuration de Prometheus. Tapez:
+
[source,bash]
----
vi /etc/prometheus/prometheus.yml
----
. Ajoutez les lignes suivantes:
+
[source,yaml]
----
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s
    scrape_timeout: 5s

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ['localhost:9090']

  - job_name: node
    # If prometheus-node-exporter is installed, grab stats about the local
    # machine by default.
    static_configs:
      - targets: ['localhost:9100']

  - job_name: dns-master
    static_configs:
      - targets: ['localhost:9119']
        labels:
          alias: dns-master

  - job_name: apache
    static_configs:
      - targets: ['localhost:9117']

  - job_name: process
    static_configs:
      - targets: ['localhost:9256']

  - job_name: mysql
    static_configs:
      - targets: ['localhost:9104']
----
. Editez la configuration de `prometheus-process-exporter`. Tapez:
+
[source,bash]
----
vi etc/default/prometheus-process-exporter
----
. Ajoutez les lignes suivantes:
+
[source]
----
ARGS="-procnames postgres,dovecot,apache2,sshd,php-fpm7.3,rspamd,named,mysqld"
----
. Editez la configuration de `prometheus-mysqld-exporter`. Tapez:
+
[source,bash]
----
vi etc/default/prometheus-mysqld-exporter
----
. Ajoutez les lignes suivantes:
+
[source]
----
ARGS='--config.my-cnf /etc/mysql/debian.cnf --collect.info_schema.tables.databases="*" --collect.auto_increment.columns --collect.perf_schema.file_instances.filter=".*" --collect.info_schema.tablestats'
----
. Ajuster les permissions du fichier de conf de mysql pour donner l'accès à prometheus. Tapez:
+
[source,bash]
----
chmod 644 /etc/mysql/debian.cnf
----
. Ajustez la configuration de bind pour servir des statistiques. Tapez:
+
[source,bash]
----
vi /etc/bind/named.conf
----
. Ajouter dans le fichier:
+
[source]
----
statistics-channels {
  inet 127.0.0.1 port 8053 allow { 127.0.0.1; };
};
----
. Activez dans mysql quelques statistiques. Tapez:
+
[source,bash]
----
mysql -p
----
. tapez votre mot de passe root pour mysql. puis taper:
+
[source,mysql]
----
INSTALL PLUGIN QUERY_RESPONSE_TIME_AUDIT SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME_READ SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME_WRITE SONAME 'query_response_time.so';
SET GLOBAL query_response_time_stats=ON;
SET GLOBAL userstat=ON;
----
. Redémarrez les services. Taper:
+
[source,mysql]
----
service prometheus restart
service prometheus-mysqld-exporter restart
service prometheus-process-exporter restart
----

=== Installation et configuration de Loki

Pour installer Loki, appliquez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Allez sur le site de https://github.com/grafana/loki/releases[loki] et repérez la dernière version à charger.
. Tapez:
+
[source,bash]
----
cd /usr/local/bin
curl -fSL -o loki.gz https://github.com/grafana/loki/releases/download/v1.4.1/loki-linux-amd64.zip
gunzip loki.gz
chmod a+x loki
----
. Créez le fichier de configuration de loki
+
[source,bash]
----
vi /etc/config-loki.yml
----
. Ajoutez le texte ci dessous dans le fichier
+
----
auth_enabled: false

server:
  http_listen_port: 3100
  log_level: "warn"

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
    final_sleep: 0s
  chunk_idle_period: 5m
  chunk_retain_period: 30s

schema_config:
  configs:
  - from: 2010-01-01
    store: boltdb
    object_store: filesystem
    schema: v9
    index:
      prefix: index_
      period: 168h

storage_config:
  boltdb:
    directory: /tmp/loki/index

  filesystem:
    directory: /tmp/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0

table_manager:
  chunk_tables_provisioning:
    inactive_read_throughput: 0
    inactive_write_throughput: 0
    provisioned_read_throughput: 0
    provisioned_write_throughput: 0
  index_tables_provisioning:
    inactive_read_throughput: 0
    inactive_write_throughput: 0
    provisioned_read_throughput: 0
    provisioned_write_throughput: 0
  retention_deletes_enabled: false
  retention_period: 0

----
. Débloquez le port 3100 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 3100
.. Cliquez sur `save`
. Testez maintenant la configuration de Loki. Tapez:
+
[source,bash]
----
loki -config.file /etc/config-loki.yml
----
. Ouvrez un navigateur et visitez: http://example.com:3100/metrics
. Maintenant arrêtez Loki en tapant *CTRL-C*.
. Bloquez par sécurité le port 3100 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, Supprimer le port 3100
.. Cliquez sur `save`
. Configurez un service Loki afin de le faire tourner en arrière plan. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/loki.service
----
. Ajoutez le texte ci dessous et sauvez:
+
[source]
----
[Unit]
Description=Loki service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/loki -config.file /etc/config-loki.yml

[Install]
WantedBy=multi-user.target
----
. Maintenant lancez le service et vérifiez que tout est fonctionnel. Tapez:
Now start and check the service is running.
+
[source,bash]
----
sudo service loki start
sudo service loki status
----


=== Installation et configuration de Promtail

Installez maintenant Promtail:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
cd /usr/local/bin
curl -fSL -o promtail.gz https://github.com/grafana/loki/releases/download/v1.4.1/promtail-linux-amd64.zip
gunzip promtail.gz
chmod a+x promtail
----
. Créez la configuration de Promtail. Tapez:
+
[source,bash]
----
mkdir -p /var/log/journal
vi /etc/config-promtail.yml
----
. Et ajoutez le texte suivant puis sauvez:
+
[source]
----
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://127.0.0.1:3100/api/prom/push

scrape_configs:
- job_name: system
  static_configs:
  - targets:
      - localhost
    labels:
      job: varlogs
      __path__: /var/log/{*.log,*/*.log}
----
. Débloquez le port 9080 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, ajoutez le port 9080
.. Cliquez sur `save`
. testez que Promtail fonctionne. Tapez:
+
[source,bash]
----
promtail -config.file /etc/config-promtail.yml
----
. Ouvrez un navigateur et visitez: http://example.com:9080
. Maintenant arrêtez Promtail en tapant *CTRL-C*.
. Bloquez par sécurité le port 9080 dans votre firewall
.. Allez sur le site ispconfig https://example.com:8080/
.. Loguez-vous et cliquez sur la rubrique `System` et le menu `Firewall`. Cliquez sur votre serveur.
.. dans la rubrique `Open TCP ports:`, Supprimer le port 9080
.. Cliquez sur `save`
. Configurez un service Promtail afin de le faire tourner en arrière plan. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/promtail.service
----
. Ajoutez le texte ci dessous et sauvez:
+
[source]
----
[Unit]
Description=Promtail service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/promtail -config.file /etc/config-promtail.yml

[Install]
WantedBy=multi-user.target
----
. Maintenant lancez le service et vérifiez que tout est fonctionnel. Tapez:
+
[source,bash]
----
sudo service promtail start
sudo service promtail status
----
. Allez sur votre site grafana http://grafana.example.com et ajoutez une source de données de type loki
. Mettez l'URL suivante: http://127.0.0.1:3100 . Laissez tout le reste tel quel.
. vous pouvez maintenant explorer vos logs en utilisant le menu explore sur la gauche. Dans la zone texte "Log Labels" essayez ces examples un à un: 
+
[source]
----
{job="varlogs"}
----

== Annexe

=== Installation de Hestia

Hestia est basé sur VestaCP. C'est une alternative opensource et plus moderne de cet outiL.
La documentation est proposée ici: https://docs.hestiacp.com/

Attention Hestia n'est pas compatible de Webmin dans le sens que webmin est incapable de lire et d'interpréter les fichiers créés par Hestia.

De même, Hestia est principalement compatible de PHP. Si vous utilisez des système web basés sur des applicatifs écrits en Python ou en Ruby, la configuration sera à faire à la main avec tous les problèmes de compatibilité que cela impose.

Pour installer:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Télécharger le package et lancez l’installeur
.. Tapez :
+
[source,bash]
----
wget https://raw.githubusercontent.com/hestiacp/hestiacp/release/install/hst-install.sh
----
.. Lancez l'installeur. Tapez :
+
[source,bash]
----
bash hst-install.sh -g yes -o yes
----
.. Si le système n'est pas compatible, HestiaCP vous le dira. Sinon,  il vous informe de la configuration qui sera installée. Tapez `Y` pour continuer.
.. Entrez votre adresse mail standard et indépendante du futur serveur qui sera installé. ce peut être une adresse gmail.com par exemple.
. Hestia est installé. Il est important de bien noter le mot de passe du compte admin de Hestia ainsi que le numéro de port du site web

=== backup

pour installer borg backup en mode rescue afin d'avoir la dernière version.
apt install python3-pip libssl-dev cython3 gcc g++ libpython-dev libacl1-dev
pip3 install borgbackup
pip3 install rdiff-backup


