== Installation de Docker et des outils associés

Le logiciel `Docker` est une technologie de conteneurisation qui permet la création et l'utilisation de conteneurs Linux.
En clair, `Docker` permet d'installer et de configurer rapidement toute une appli web complexe dans un environnement isolé et avec tout son échosystème de bibliothèques logicielles spécifiques.

Il est ainsi possible d'effectuer rapidement des installations, de suivre des mises à jours et d'isoler ces environnements du système principal.

=== A propos des Raspberry Pi

WARNING: Les raspberry utilisent une architecture ARM, tous les containeurs ne seront pas forcément compatibles "out of the box" ( Exemple pour MySQL). Sur le https://hub.docker.com/[Docker Hub], il faut choisir par un Raspberry Pi 4 en Ubuntu une architecture de type ARM64 et pour un Raspberry Pi 3 en Raspbian une architecture de type ARM.

=== Installation de Docker

L'installation de Docker est relativement simple.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Désinstallez les éventuelles anciennes versions de docker. tapez:
+
[source,bash]
----
apt remove --purge docker docker-engine docker.io containerd runc <1>
----
<1> docker-engine n'existe pas dans une distribution ubuntu. C'est à enlever.
. Tapez:
+
[source,bash]
----
apt update
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
----
. tapez :
+
[source,bash]
----
lsb_release -cs
----
. Ici la version de votre distribution doit s'afficher.
+
WARNING: pour des installations hybride d'une distribution debian, la version qui est proposée peut être la future SID ou la Testing pour lesquelles il n'existe pas obligatoirement de version installable de docker. Dans ce cas vous devrez sélectionner vous même la version de la distribution stable.
. Tapez (et remplacer éventuellement la commande $(lsb_release -cs) par le nom de votre distribution stable).  :
+
[source,bash]
----
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" <1>
----
<1> ici il faut remplacer l'architecture `amd64` par `arm64` pour un raspberry pi 4  ou par `armhf` pour un raspberry pi 3. De la même manière, remplacez debian par ubuntu si vous utilisez une distribution ubuntu/
. Une fois installé avec succès, tapez:
+
[source,bash]
----
apt update
----
. Si vous obtenez une erreur c'est que vous avez ajouté un repository qui n'est pas suppporté par Docker. Vérifiez les fichier `/etc/apt/sources.list`.
. Une fois mis à jour avec succès, tapez:
+
[source,bash]
----
apt install docker-ce docker-ce-cli containerd.io
----
. vérifiez que votre installation de `Docker` est fonctionnelle. Tapez:
+
[source,bash]
----
docker run hello-world
----
. Cette commande exécute un conteneur simple. Si aucune erreur n’apparaît c'est que l'installation est réussie.

=== Installation de docker-compose

Docker-compose est un outil qui aide à l'installation de plusieurs container de façon simultané. Il permet surtout de vérifier que l'échosystème installé interagit bien.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Installez quelques paquets Debian de base. Tapez:
+
[source,bash]
----
apt install libffi-dev libssl-dev
apt install -y python3 python3-pip <1>
----
<1> Pour Ubuntu, remplacez ces paquets par `python` et `python-pip`
. Installez docker-compose :
+
[source,bash]
----
pip3 install docker-compose
----

=== Installation de docker swarm

Docker contient nativement le mode Swarm afin de gérer un ensemble de Docker Engines.
Cette installation est optionnelle puisque l'on peut faire fonctionner Docker sans cette Option.

Il y a deux types de machines: les *Managers* et les *Workers*.

Les managers : Ce sont les nodes gestionnaires de votre cluster. Ils distribuent les tâches aux nodes workers et ils effectuent également les fonctions d'orchestration et de gestion.

Les workers : Ils vont exécuter les tâches confiées par les managers. Un agent s'exécute sur chaque nœud et rend compte des tâches qui lui sont affectées. Il informe ainsi les nodes managers de l'état des tâches affectées.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
docker swarm init
----
. Le résultat de la commande donne la commande `docker swarm join` a exécuter sur un "worker"  pour lui faire rejoindre le "swarm". A noter que le "manager" que nous venons de creer est aussi un worker. De ce fait, un swarm peut être installé de façon standalone sur un VPS.
. Vous pouvez maintenant vérifier l'état de votre cluster. Tapez:
+
[source,bash]
----
docker node ls
----

=== Choix des images docker

Les images docker sont accessibles sur le https://hub.docker.com/[Docker Hub].

Mais voilà, c'est un peu la jungle. Un bon moyen de trouver des images à jour d'un point de vue sécurité et non compromises est de ne sélectionner que des images "Docker Certified" ou "Verified Publisher" ou "Official Images".

Du moins on est sûr que ces images ont été à minima vérifiées par les équipes Docker.

Pour mémoire: *Le nombre de chargement d'une image n'est pas un gage de qualité !*

Si vous n'utilisez pas une image du type mentionné ci dessus, l'accès facile au fichier Dockerfile est un gage de qualité et de transparence. En tout cas, il vous sera facilement possible de regarder comment l'image est construite et quels sont les package dockers de base et si ces packages dockers de base sont récents et certifiés.

Pour les plateformes de type Raspberry, il faut bien vérifier que l'image docker que vous chargez est compatible de votre plateforme. Sur Docker Hub, vous devez allez sur l'onglet Tag de votre package et vérifier que le champ OS/ARCH contient bien votre plateforme.

Pour un Raspberry Pi 4 ce doit être: `Linux/arm64`

Pour un Raspberry Pi 3 ce doit être: `Linux/arm`

Par exemple pour les docker de `Yacht` et de `Portainer` décrits ci après, on peut voir que les containers sont multiplateforme et conviennent très bien pour de l'Intel ou de l'ARM.

=== Mise à jour automatique des images

Vos images docker peuvent être mise à jour automatiquement si vous les avez installés à partir du docker hub ou de n'importe quel autre repository compatible.

Un outil automatise cette mise à jour c'est https://github.com/pyouroboros/ouroboros[ouroboros].

Pour l'installe, rien de plus simple:

. Tapez:
+
[source,bash]
----
docker run -d --name ouroboros -e CLEANUP=true -e LATEST=true -e SELF_UPDATE=true --restart=always -v /var/run/docker.sock:/var/run/docker.sock pyouroboros/ouroboros
----
. Les options `CLEANUP`, `LATEST` et `SELF_UPDATE` sont respectivement pour effacer les anciennes images docker, coller les containeurs à la version `latest` du repository et effectuer une mise à jour automatique de ouroboros.

La documentation de ouroboros est https://github.com/pyouroboros/ouroboros/wiki/Usage[ici].

WARNING: Ouroboros n'est plus maintenu depuis fin 2019. Une alternative est à trouver.
