== Installation de Docker et des outils associés

Le logiciel « Docker » est une technologie de conteneurisation qui permet la création et l'utilisation de conteneurs Linux.
En clair, Docker permet d'installer et de configurer rapidement toute une appli web complexe dans un environnement isolé et avec tout son échosystème de bibliothèques logicielles spécifiques.

Il est ainsi possible d'effectuer rapidement des installations, de suivre des mises à jours et d'isoler ces environnements du système principal.

=== A propos des Raspberry Pi

WARNING: Les raspberry utilisent une architecture ARM, tous les containeurs ne seront pas forcément compatibles "out of the box" ( Exemple pour MySQL). Sur le https://hub.docker.com/[Docker Hub], il faut choisir par un Raspberry Pi 4 en Ubuntu une architecture de type ARM64 et pour un Raspberry Pi 3 en Raspbian une architecture de type ARM.

=== Installation de Docker

L'installation de Docker est relativement simple.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Désinstallez les éventuelles anciennes versions de docker. tapez:
+
[source,bash]
----
apt remove --purge docker docker-engine docker.io containerd runc
----
. Tapez:
+
[source,bash]
----
apt update
apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
----
. tapez :
+
[source,bash]
----
lsb_release -cs
----
. Ici la version de votre distribution doit s'afficher.
+
WARNING: pour des installations hybride d'une distribution debian, la version qui est proposée peut être la future SID ou la Testing pour lesquelles il n'existe pas obligatoirement de version installable de docker. Dans ce cas vous devrez sélectionner vous même la version de la distribution stable.
. Tapez (et remplacer éventuellement la commande $(lsb_release -cs) par le nom de votre distribution stable). De la même manière, remplacez l'architecture `amd64` par `arm64` pour un raspberry pi 4  ou par `armhf` pour un raspberry pi 3 :
+
[source,bash]
----
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
----
. Une fois installé avec succès, tapez:
+
[source,bash]
----
apt update
----
. Si vous obtenez une erreur c'est que vous avez ajouté un repository qui n'est pas suppporté par Docker. Vérifiez les fichier `/etc/apt/sources.list`.
. Une fois mis à jour avec succès, tapez:
+
[source,bash]
----
apt install docker-ce docker-ce-cli containerd.io
----
. vérifiez que votre installation de `Docker` est fonctionnelle. Tapez:
+
[source,bash]
----
docker run hello-world
----
. Cette commande exécute un conteneur simple. Si aucune erreur n’apparaît c'est que l'installation est réussie.

=== Installation de docker-compose

Docker-compose est un outil qui aide à l'installation de plusieurs container de façon simultané. Il permet surtout de vérifier que l'échosystème installé interagit bien.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Installez quelques paquets Debian de base. Tapez:
+
[source,bash]
----
apt install libffi-dev libssl-dev
apt install -y python3 python3-pip <1>
----
<1> Pour Ubuntu, remplacez ces paquets par `python` et `python-pip`
. Installez docker-compose :
+
[source,bash]
----
pip install docker-compose
----

=== Installation de docker swarm

Docker contient nativement le mode Swarm afin de gérer un ensemble de Docker Engines.
Cette installation est optionnelle puisque l'on peut faire fonctionner Docker sans cette Option.

Il y a deux types de machines: les *Managers* et les *Workers*.

Les managers : Ce sont les nodes gestionnaires de votre cluster. Ils distribuent les tâches aux nodes workers et ils effectuent également les fonctions d'orchestration et de gestion.

Les workers : Ils vont exécuter les tâches confiées par les managers. Un agent s'exécute sur chaque nœud et rend compte des tâches qui lui sont affectées. Il informe ainsi les nodes managers de l'état des tâches affectées.

Il faut suivre les étapes suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
docker swarm init
----
. Le résultat de la commande donne la commande `docker swarm join` a exécuter sur un "worker"  pour lui faire rejoindre le "swarm". A noter que le "manager" que nous venons de creer est aussi un worker. De ce fait, un swarm peut être installé de façon standalone sur un VPS.
. Vous pouvez maintenant vérifier l'état de votre cluster. Tapez:
+
[source,bash]
----
docker node ls
----

=== Choix des images docker

Les images docker sont accessibles sur le https://hub.docker.com/[Docker Hub].

Mais voilà, c'est un peu la jungle. Un bon moyen de trouver des images à jour d'un point de vue sécurité et non compromises est de ne sélectionner que des images "Docker Certified" ou "Verified Publisher" ou "Official Images".

Du moins on est sûr que ces images ont été à minima vérifiées par les équipes Docker.

Pour mémoire: *Le nombre de chargement d'une image n'est pas un gage de qualité !*

Si vous n'utilisez pas une image du type mentionné ci dessus, l'accès facile au fichier Dockerfile est un gage de qualité et de transparence. En tout cas, il vous sera facilement possible de regarder comment l'image est construite et quels sont les package dockers de base et si ces packages dockers de base sont récents et certifiés.

=== Mise à jour automatique des images

Vos images docker peuvent être mise à jour automatiquement si vous les avez installés à partir du docker hub ou de n'importe quel autre repository compatible.

Un outil automatise cette mise à jour c'est https://github.com/pyouroboros/ouroboros[ouroboros].

Pour l'installe, rien de plus simple:

. Tapez:
+
[source,bash]
----
docker run -d --name ouroboros -e CLEANUP=true -e LATEST=true -e SELF_UPDATE=true --restart=always -v /var/run/docker.sock:/var/run/docker.sock pyouroboros/ouroboros
----
. Les options `CLEANUP`, `LATEST` et `SELF_UPDATE` sont respectivement pour effacer les anciennes images docker, coller les containeurs à la version `latest` du repository et effectuer une mise à jour automatique de ouroboros.

La documentation de ouroboros est https://github.com/pyouroboros/ouroboros/wiki/Usage[ici].

WARNING: Ouroboros n'est plus maintenu depuis fin 2019. Une alternative est à trouver.

=== Installation de Yacht

Yacht est un outil d'administration de vos instances docker sous forme de site web. Yacht est très facile d'utilisation mais manque de possibilités du moins dans la version actuelle. Si vous souhaitez administrer de façon plus avancée vos instances docker, il est conseillé d'utiliser Portainer.

Yacht s’installe comme un conteneur docker pour simplifier son déploiement.

Pour la création du site web, il faut suivre les étapes suivantes:

. Allez dans ISPConfig dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `yacht`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `yacht`.
.. Le faire pointer vers le web folder `yacht`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
<Location /.well-known >
    AuthType None   
    Options None
    AllowOverride None
    Require all granted
    AddDefaultCharset off
</Location>

# yacht httpserver
#
 
ProxyPass "/.well-known" !

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPreserveHost    On
ProxyPass / http://localhost:8061/
ProxyPassReverse / http://localhost:8061/

RedirectMatch ^/$ https://yacht.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine
. Puis sur votre serveur, <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
docker volume create yacht_data
docker run -d -p 8061:8000 -v /var/run/docker.sock:/var/run/docker.sock --restart=always -v yacht_data:/config selfhostedpro/yacht
----
. Ouvrez un navigateur et pointez sur http://yacht.example.com
. L'utilisateur par défaut est login: `admin@yacht.local` et mot de passe: `pass`.
. Une fois loggué, Cliquez sur l'utilisateur en haut à droite et `user`.
. Cliquez sur `change password`
. Modifier votre Email de login et saisissez un nouveau mot de passe.
. Cliquez ensuite sur `Templates` dans la barre vertical de gauche puis sur `New templates`
. Copiez la suggestion de template proposée.
. Saisissez un titre `Yacht` dans le champ `Title` puis collez l'URL du json dans le champ `URL`
. Cliquez sur Submit.
. Allez dans `Templates` -> `View Templates`.
. cliquez sur `Yacht`; vous avez maintenant accès à une foule de templates.
. Vous pouvez maintenant administrer vos machines docker. Référez vous à la documentation de https://yacht.sh/Pages/dashboard/[Yacht] pour installer de nouvelles machines docker

=== Installation de Portainer

Portainer est un outil d'administration de vos instances docker sous forme de site web. Portainer est plus complexe à utiliser que Yacht, mais offre cependant beaucoup plus de possibilités.

Portainer s’installe comme un conteneur docker pour simplifier son déploiement. Portainer gère une bonne partie des éléments de docker : conteneurs, images, volumes, réseaux, utilisateurs

Pour la création du site web, il faut suivre les étapes suivantes:

. Allez dans ISPConfig dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `portainer`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `portainer`.
.. Le faire pointer vers le web folder `portainer`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
<Location /.well-known >
    AuthType None   
    Options None
    AllowOverride None
    Require all granted
    AddDefaultCharset off
</Location>

# portainer httpserver
#
 
ProxyPass "/.well-known" !

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPreserveHost    On
ProxyPass / http://localhost:9050/
ProxyPassReverse / http://localhost:9050/

RedirectMatch ^/$ https://portainer.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine
. Puis sur votre serveur, <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
docker volume create portainer_data
docker run -d -p 8060:8000 -p 9050:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce
----
. Ouvrez un navigateur et pointez sur http://portainer.example.com
. Créez votre utilisateur de `admin` avec un mot de passe sécurisé.
. Ajoutez un endpoint `Local`
. Vous pouvez maintenant administrer vos machines docker. Référez vous à la documentation de https://documentation.portainer.io/v2.0/stacks/create/[portainer] pour installer de nouvelles machines docker

Portainer offre la possibilité d'installer des templates par défaut. Vous pouvez soit garder le repository par défault : `https://raw.githubusercontent.com/portainer/templates/master/templates-2.0.json` ou utiliser un autre repository comme: `https://raw.githubusercontent.com/Qballjos/portainer_templates/master/Template/template.json`:

. allez sur votre site web portainer.
. puis dans le menu Settings
. Dans la zone `App Templates` saisissez le repository de votre choix dans le champ `URL`
. Cliquez sur `Save Settings`
. retournez dans le menu `App Templates`; vos nouveau templates sont maintenant affichés.
